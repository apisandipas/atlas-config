(undo-tree-save-format-version . 1)
"217faac7310f270c8085def725316dcc852ec19f"
[nil nil nil nil (25143 30267 967214 379000) 0 nil]
([nil nil ((nil rear-nonsticky nil 1 . 2) (#("
" 0 1 (fontified nil)) . -836) (1 . 837) (t 25143 30244 878887 877000)) nil (25143 30267 967211 849000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 1) (undo-tree-id1 . -1)) nil (25143 30267 967278 693000) 0 nil])
([nil nil ((#("editing" 0 7 (face font-lock-comment-face fontified t)) . 813) (820 . 827) (#("editing" 0 7 (face font-lock-constant-face fontified t)) . 797) (804 . 811) (159 . 166) ("windows" . 159) (#("Editing" 0 7 (face font-lock-comment-face fontified t)) . 159) (166 . 173) (#("editing" 0 7 (face font-lock-comment-face fontified t)) . 8) (15 . 22)) nil (25143 30399 769759 716000) 0 nil] [nil nil ((#("
" 0 1 (face font-lock-comment-face fontified t)) . -46) (undo-tree-id0 . -1) 1) ((46 . 47)) (25143 30267 967200 994000) 0 nil])
([nil nil ((#("(use-package ws-butler
  :hook ((text-mode . ws-butler-mode)
         (prod-mode . ws-butler-mode)))

(use-package evil-nerd-commenter
  ;; Set a global binding for better line commenting/uncommenting
  :config
  (bp/leader-keys
    \"tj\" '(evilnc-comment-or-uncomment-lines :which-key \"toggle comments\"))) 

;; Set up ws-butler for trimming whitespace and line endings
(add-hook 'text-mode-hook 'ws-butler-mode)
(add-hook 'prog-mode-hook 'ws-butler-mode)


;; parentheses
(electric-pair-mode 1) ; auto-insert matching bracket
(show-paren-mode 1)    ; turn on paren match highlighting
" 0 1 (fontified t) 1 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 22 (face font-lock-constant-face fontified t) 22 25 (fontified t) 25 30 (face font-lock-builtin-face fontified t) 30 103 (fontified t) 103 114 (face font-lock-keyword-face fontified t) 114 115 (fontified t) 115 134 (face font-lock-constant-face fontified t) 134 137 (fontified t) 137 140 (face font-lock-comment-delimiter-face fontified t) 140 201 (face font-lock-comment-face fontified t) 201 203 (fontified t) 203 210 (face font-lock-builtin-face fontified t) 210 211 (fontified t) 211 214 (fontified t) 214 228 (face font-lock-keyword-face fontified t) 228 229 (fontified t) 229 233 (fontified t) 233 237 (face font-lock-string-face fontified t) 237 245 (fontified t) 245 246 (fontified t) 246 274 (fontified t) 274 284 (face font-lock-builtin-face fontified t) 284 285 (fontified t) 285 302 (face font-lock-string-face fontified t) 302 303 (fontified t) 303 304 (fontified t) 304 307 (fontified t) 307 308 (fontified t) 308 311 (face font-lock-comment-delimiter-face fontified t) 311 369 (face font-lock-comment-face fontified t) 369 457 (fontified t) 457 460 (face font-lock-comment-delimiter-face fontified t) 460 472 (face font-lock-comment-face fontified t) 472 495 (fontified t) 495 497 (face font-lock-comment-delimiter-face fontified t) 497 526 (face font-lock-comment-face fontified t) 526 549 (fontified t) 549 551 (face font-lock-comment-delimiter-face fontified t) 551 584 (face font-lock-comment-face fontified t)) . 199) (undo-tree-id22 . -583) (undo-tree-id23 . -583) (undo-tree-id24 . -583) (undo-tree-id25 . 584) (undo-tree-id26 . -1) (undo-tree-id27 . 485) (undo-tree-id28 . -100)) nil (25143 30399 769755 25000) 0 nil])
nil
([nil nil ((217 . 219) (216 . 217) (204 . 216) (#("d" 0 1 (fontified t)) . -204) (undo-tree-id20 . -1) (#("e" 0 1 (fontified t)) . -205) (undo-tree-id21 . -1) 206 (201 . 206) (200 . 202) (199 . 200) (199 . 200)) nil (25143 30399 769743 731000) 0 nil])
([nil nil ((299 . 302) (290 . 299) (269 . 290) (#("-" 0 1 (fontified t)) . -269) (undo-tree-id2 . -1) 270 (258 . 270) (255 . 258) (216 . 218) (#("]" 0 1 (fontified t)) . -215) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . 1) (undo-tree-id7 . -1) 216 (#("k" 0 1 (fontified t)) . -255) (undo-tree-id8 . -1) 256 (255 . 256) (#(" " 0 1 (fontified nil)) . -217) (255 . 256) (#(" " 0 1 (fontified t)) . 255) (244 . 254) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -244) (undo-tree-id9 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -245) (undo-tree-id10 . -1) (#("w" 0 1 (face font-lock-string-face fontified t)) . -246) (undo-tree-id11 . -1) 247 (243 . 247) (#("t" 0 1 (face font-lock-builtin-face fontified t)) . -243) (undo-tree-id12 . -1) (#(" " 0 1 (fontified t)) . -244) (undo-tree-id13 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -245) (undo-tree-id14 . -1) 246 (243 . 246) (#("u" 0 1 (face font-lock-builtin-face fontified t)) . -243) (undo-tree-id15 . -1) (#(" " 0 1 (fontified t)) . -244) (undo-tree-id16 . -1) 245 (225 . 245) (224 . 225) (223 . 225) (#(")" 0 1 (fontified t)) . -223) (undo-tree-id17 . -1) (undo-tree-id18 . 1) (undo-tree-id19 . -1) 224 (221 . 224) (219 . 220) (218 . 220)) nil (25143 30399 769726 381000) 0 nil])
([nil nil ((nil rear-nonsticky nil 304 . 305) (#("
" 0 1 (fontified nil)) . -349) (302 . 350) 270 (t 25143 30399 776024 892000)) nil (25143 30737 309628 516000) 0 nil])
([nil nil ((nil rear-nonsticky nil 351 . 352) (#("
" 0 1 (fontified nil)) . -396) (349 . 397) 305) nil (25143 30737 309625 346000) 0 nil])
([nil nil ((nil rear-nonsticky nil 398 . 399) (#("
" 0 1 (fontified nil)) . -443) (396 . 444) 352) nil (25143 30737 309622 526000) 0 nil])
([nil nil ((307 . 308) (#("j" 0 1 (face font-lock-string-face fontified t)) . 307) (307 . 308) (#("h" 0 1 (face font-lock-string-face fontified t)) . 307)) nil (25143 30737 309619 488000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -443) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) 444 (403 . 404) (#("h" 0 1 (face font-lock-string-face fontified t)) . -403) (undo-tree-id46 . -1) (undo-tree-id47 . -1) 404 (356 . 357) (#("h" 0 1 (face font-lock-string-face fontified t)) . -356) (undo-tree-id48 . -1) (undo-tree-id49 . -1) 357 (439 . 441) (#("l" 0 1 (face font-lock-string-face fontified t)) . -439) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -440) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("f" 0 1 (face font-lock-string-face fontified t)) . -441) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -442) (undo-tree-id56 . -1) (undo-tree-id57 . -1) 443 (392 . 396) (#("l" 0 1 (face font-lock-string-face fontified t)) . -392) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -393) (undo-tree-id61 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -394) (undo-tree-id62 . -1) 395 (393 . 395) (#("d" 0 1 (face font-lock-string-face fontified t)) . -393) (undo-tree-id63 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -394) (undo-tree-id64 . -1) (#("w" 0 1 (face font-lock-string-face fontified t)) . -395) (undo-tree-id65 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -396) (undo-tree-id66 . -1) 397 (393 . 397) (#("e" 0 1 (face font-lock-string-face fontified t)) . -393) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("f" 0 1 (face font-lock-string-face fontified t)) . -394) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -395) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) 396 (370 . 374) (#("l" 0 1 (fontified t)) . -370) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#("e" 0 1 (fontified t)) . -371) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#("f" 0 1 (fontified t)) . -372) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (#("t" 0 1 (fontified t)) . -373) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) 374 (323 . 326) (#("g" 0 1 (fontified t)) . -323) (undo-tree-id88 . -1) 324 (321 . 324) (#("l" 0 1 (fontified t)) . -321) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (#("e" 0 1 (fontified t)) . -322) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#("f" 0 1 (fontified t)) . -323) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("t" 0 1 (fontified t)) . -324) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) 325 (343 . 348) (#("l" 0 1 (face font-lock-string-face fontified t)) . -343) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -344) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (#("f" 0 1 (face font-lock-string-face fontified t)) . -345) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -346) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) 347) nil (25143 30737 309604 203000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 443) (undo-tree-id37 . 1) (undo-tree-id38 . -1) (undo-tree-id39 . 1) (undo-tree-id40 . -1)) nil (25143 30737 309351 748000) 0 nil])
([nil nil ((484 . 499) (#("e" 0 1 (face font-lock-string-face fontified t)) . -484) (undo-tree-id29 . -1) (#("v" 0 1 (face font-lock-string-face fontified t)) . -485) (undo-tree-id30 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -486) (undo-tree-id31 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -487) (undo-tree-id32 . -1) 488 (484 . 488) (475 . 484) (#("c" 0 1 (face font-lock-builtin-face fontified t)) . -475) (undo-tree-id33 . -1) (#("i" 0 1 (face font-lock-builtin-face fontified t)) . -476) (undo-tree-id34 . -1) (#("h" 0 1 (face font-lock-builtin-face fontified t)) . -477) (undo-tree-id35 . -1) 478 (477 . 478) (456 . 477) (446 . 456) (444 . 446) (445 . 447) (#("  " 0 2 (fontified nil)) . 444) (undo-tree-id36 . -2) (443 . 447) (443 . 444)) nil (25143 30737 309338 379000) 0 nil])
([nil nil ((nil rear-nonsticky nil 501 . 502) (#("
" 0 1 (fontified nil)) . -555) (499 . 556) 498 (t 25143 30737 313065 137000)) nil (25143 30866 256330 968000) 0 nil])
([nil nil ((504 . 505) (#("d" 0 1 (face font-lock-string-face fontified t)) . 504)) nil (25143 30866 256329 531000) 0 nil])
([nil nil ((551 . 561) (539 . 544) (#("d" 0 1 (face font-lock-string-face fontified t)) . -539) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -540) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -541) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -542) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -543) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -544) (undo-tree-id150 . -1) (undo-tree-id151 . -1) 545 (521 . 526) (#("d" 0 1 (fontified t)) . -521) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (#("e" 0 1 (fontified t)) . -522) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("l" 0 1 (fontified t)) . -523) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#("e" 0 1 (fontified t)) . -524) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#("t" 0 1 (fontified t)) . -525) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) 526 (#("e" 0 1 (fontified t)) . 526) (undo-tree-id167 . -1) (undo-tree-id168 . -1)) nil (25143 30866 256326 503000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -627) (563 . 628) 560) nil (25143 30866 256291 340000) 0 nil])
([nil nil ((568 . 569) (#("s" 0 1 (face font-lock-string-face fontified t)) . 568)) nil (25143 30866 256289 814000) 0 nil])
([nil nil ((617 . 625) (#("h" 0 1 (face font-lock-string-face fontified t)) . -617) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -618) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -619) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -620) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#("z" 0 1 (face font-lock-string-face fontified t)) . -621) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -622) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -623) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -624) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -625) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) 626 (585 . 586)) nil (25143 30866 256284 389000) 0 nil])
([nil nil ((nil rear-nonsticky nil 501 . 502) (#("
" 0 1 (fontified nil)) . -555) (499 . 556) 460 (t 25143 30866 259342 309000)) nil (25143 30919 582704 506000) 0 nil])
([nil nil ((448 . 449) (#("d" 0 1 (face font-lock-string-face fontified t)) . 448)) nil (25143 30919 582701 850000) 0 nil])
([nil nil ((484 . 489) (#("d" 0 1 (face font-lock-string-face fontified t)) . -484) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -485) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -486) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -487) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -488) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -489) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) 490) nil (25143 30919 582697 7000) 0 nil])
([nil nil ((577 . 583) (#("f" 0 1 (face font-lock-comment-face fontified t)) . -577) (undo-tree-id169 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -578) (undo-tree-id170 . -1) 579 (576 . 579) (#("0" 0 1 (face font-lock-comment-face fontified t)) . -576) (undo-tree-id171 . -1) 577 (572 . 577) (#("c" 0 1 (face font-lock-comment-face fontified t)) . -572) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -573) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -574) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (#("v" 0 1 (face font-lock-comment-face fontified t)) . -575) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -576) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -577) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -578) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (#("c" 0 1 (face font-lock-comment-face fontified t)) . -579) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -580) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -581) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (#("c" 0 1 (face font-lock-comment-face fontified t)) . -582) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -583) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -584) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) 585 (576 . 585) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -576) (undo-tree-id211 . -1) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -577) (undo-tree-id212 . -1) 578 (557 . 578) (#("c" 0 1 (face font-lock-comment-face fontified t)) . -557) (undo-tree-id213 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -558) (undo-tree-id214 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -559) (undo-tree-id215 . -1) 560 (554 . 560)) nil (25143 30919 582661 390000) 0 nil])
([nil nil ((652 . 653) (#("v" 0 1 (face font-lock-string-face fontified t)) . 652) (t 25143 30919 584974 420000)) nil (25143 30975 897619 655000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -843) (711 . 844) 710) nil (25143 30975 897616 563000) 0 nil])
([nil nil ((782 . 784) (#("|" 0 1 (face font-lock-string-face fontified t)) . -782) (undo-tree-id234 . -1) 783 (782 . 783) (#("h" 0 1 (face font-lock-string-face fontified t)) . -782) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) 783 (717 . 719)) nil (25143 31025 534898 431000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 849) (undo-tree-id266 . -1) (undo-tree-id267 . 1) (undo-tree-id268 . -1)) nil (25143 31032 79190 793000) 0 nil] [nil nil ((#("  \"ws\\_\" '(evil-window-split :which-key \"split-window-horizonal\")
" 0 1 (fontified t) 1 2 (fontified t rear-nonsticky t) 2 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (help-echo "This \\ has no effect" face (font-lock-warning-face font-lock-string-face) fontified t) 6 7 (face font-lock-string-face fontified t) 7 8 (face font-lock-string-face fontified t) 8 29 (fontified t) 29 39 (face font-lock-builtin-face fontified t) 39 40 (fontified t) 40 41 (face font-lock-string-face fontified t) 41 63 (face font-lock-string-face fontified t) 63 64 (face font-lock-string-face fontified t) 64 65 (fontified t) 65 66 (fontified t)) . 712) (undo-tree-id242 . -30) (undo-tree-id243 . -30) (undo-tree-id244 . 34) (undo-tree-id245 . -30) (undo-tree-id246 . -31) (undo-tree-id247 . -30) (undo-tree-id248 . -30) 742 (t 25143 30975 902472 926000)) ((712 . 778)) (25143 31024 749952 480000) 0 nil])
([nil nil ((#("  \"ws\\_\" '(evil-window-split :which-key \"split-window-horizonal\")
" 0 1 (fontified t) 1 2 (fontified t rear-nonsticky t) 2 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (help-echo "This \\ has no effect" face (font-lock-warning-face font-lock-string-face) fontified t) 6 7 (face font-lock-string-face fontified t) 7 8 (face font-lock-string-face fontified t) 8 29 (fontified t) 29 39 (face font-lock-builtin-face fontified t) 39 40 (fontified t) 40 41 (face font-lock-string-face fontified t) 41 63 (face font-lock-string-face fontified t) 63 64 (face font-lock-string-face fontified t) 64 65 (fontified t) 65 66 (fontified t)) . 712) (undo-tree-id273 . -19) (undo-tree-id274 . -30) (undo-tree-id275 . 34) (undo-tree-id276 . -30) (undo-tree-id277 . -31) (undo-tree-id278 . -19) (undo-tree-id279 . -19) 731 (t 25143 31032 79976 901000)) nil (25143 31048 492402 598000) 0 nil])
([nil nil ((#("  \"w\\|\" '(evil-window-vsplit :which-key \"split-window-vertical\")
" 0 1 (fontified t) 1 2 (fontified t rear-nonsticky t) 2 4 (face font-lock-string-face fontified t) 4 5 (help-echo "This \\ has no effect" face (font-lock-warning-face font-lock-string-face) fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t) 7 29 (fontified t) 29 39 (face font-lock-builtin-face fontified t) 39 40 (fontified t) 40 41 (face font-lock-string-face fontified t) 41 62 (face font-lock-string-face fontified t) 62 63 (face font-lock-string-face fontified t) 63 64 (fontified t) 64 65 (fontified t)) . 712) (undo-tree-id238 . 65) (undo-tree-id239 . 59) (undo-tree-id240 . -2) 714) ((712 . 777)) (25143 31024 491966 922000) 0 nil])
([nil nil ((#("  \"w\\|\" '(evil-window-vsplit :which-key \"split-window-vertical\")
" 0 1 (fontified t) 1 2 (fontified t rear-nonsticky t) 2 4 (face font-lock-string-face fontified t) 4 5 (help-echo "This \\ has no effect" face (font-lock-warning-face font-lock-string-face) fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t) 7 29 (fontified t) 29 39 (face font-lock-builtin-face fontified t) 39 40 (fontified t) 40 41 (face font-lock-string-face fontified t) 41 62 (face font-lock-string-face fontified t) 62 63 (face font-lock-string-face fontified t) 63 64 (fontified t) 64 65 (fontified t)) . 712) (undo-tree-id269 . 65) (undo-tree-id270 . 59) (undo-tree-id271 . -2) (undo-tree-id272 . -64) 714) nil (25143 31048 492386 533000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -711) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id259 . -1) (#(" " 0 1 (fontified t)) . -712) (undo-tree-id260 . 1) (undo-tree-id261 . 1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (#(" " 0 1 (fontified t)) . -713) (undo-tree-id264 . -1) (undo-tree-id265 . -1) 714 (t 25143 31003 85265 260000)) ((711 . 714)) (25143 31024 232362 99000) 0 nil])
([nil nil ((588 . 589) (#("s" 0 1 (face font-lock-string-face fontified t)) . 588) (t 25143 31048 495247 414000)) nil (25143 31092 957349 521000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 715) (undo-tree-id249 . 1) (undo-tree-id250 . -1)) ((715 . 716) (t 25143 31021 396451 633000)) (25143 31021 393978 995000) 0 nil])
([nil nil ((#("; duplicated for ease-of-use" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 28 (face font-lock-comment-face fontified t)) . 555) (undo-tree-id322 . -27)) nil (25143 31092 957347 178000) 0 nil])
nil
([nil nil ((#(";" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 554) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1)) nil (25143 31092 957342 908000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -682) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (#(" " 0 1 (fontified t)) . -683) (undo-tree-id296 . -1) (undo-tree-id297 . 1) (undo-tree-id298 . 1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (#(" " 0 1 (fontified t)) . -684) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) 685) nil (25143 31092 957329 215000) 0 nil])
([nil nil ((706 . 708) (#("  " 0 2 (fontified nil)) . 705) (undo-tree-id382 . -2) (705 . 708) (#("  " 0 2 (fontified nil)) . 704) (undo-tree-id383 . -2) (703 . 707) (218 . 236) (215 . 218) (t 25143 31092 961271 35000) 214) nil (25143 31211 350447 915000) 0 nil])
([nil nil ((nil rear-nonsticky nil 706 . 707) (#("
" 0 1 (fontified nil face font-lock-comment-face)) . -725) (704 . 726)) nil (25143 31211 350444 88000) 0 nil])
([nil nil ((779 . 790) (#("r" 0 1 (fontified t)) . -779) (undo-tree-id323 . -1) (#("t" 0 1 (fontified t)) . -780) (undo-tree-id324 . -1) (#("g" 0 1 (fontified t)) . -781) (undo-tree-id325 . -1) (#("h" 0 1 (fontified t)) . -782) (undo-tree-id326 . -1) 783 (774 . 783) (#(":" 0 1 (fontified t)) . -774) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (#("i" 0 1 (face font-lock-builtin-face fontified t)) . -775) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (#("g" 0 1 (face font-lock-builtin-face fontified t)) . -776) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (#("n" 0 1 (face font-lock-builtin-face fontified t)) . -777) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (#("o" 0 1 (face font-lock-builtin-face fontified t)) . -778) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (#("r" 0 1 (face font-lock-builtin-face fontified t)) . -779) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (#("e" 0 1 (face font-lock-builtin-face fontified t)) . -780) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (#(" " 0 1 (fontified t)) . -781) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (#("t" 0 1 (fontified t)) . -782) (undo-tree-id343 . -1) (undo-tree-id344 . -1) 783 (796 . 808) (#("b" 0 1 (face font-lock-string-face fontified t)) . -796) (undo-tree-id345 . -1) (#("u" 0 1 (face font-lock-string-face fontified t)) . -797) (undo-tree-id346 . -1) (#("f" 0 1 (face font-lock-string-face fontified t)) . -798) (undo-tree-id347 . -1) (#("f" 0 1 (face font-lock-string-face fontified t)) . -799) (undo-tree-id348 . -1) 800 (798 . 800) (#("g" 0 1 (face font-lock-string-face fontified t)) . -798) (undo-tree-id349 . -1) 799 (781 . 799) (#("r" 0 1 (face font-lock-builtin-face fontified t)) . -781) (undo-tree-id350 . -1) 782 (780 . 782) (#("e" 0 1 (face font-lock-builtin-face fontified t)) . -780) (undo-tree-id351 . -1) (undo-tree-id352 . -1) 781 (776 . 781) (#("f" 0 1 (face font-lock-builtin-face fontified t)) . -776) (undo-tree-id353 . -1) (#("n" 0 1 (face font-lock-builtin-face fontified t)) . -777) (undo-tree-id354 . -1) (#("o" 0 1 (face font-lock-builtin-face fontified t)) . -778) (undo-tree-id355 . -1) (#("r" 0 1 (face font-lock-builtin-face fontified t)) . -779) (undo-tree-id356 . -1) (#("e" 0 1 (face font-lock-builtin-face fontified t)) . -780) (undo-tree-id357 . -1) (#(" " 0 1 (fontified t)) . -781) (undo-tree-id358 . -1) (#("t" 0 1 (fontified t)) . -782) (undo-tree-id359 . -1) 783 (775 . 783) (767 . 775) (764 . 767) (755 . 764) (#(":" 0 1 (fontified t)) . -755) (undo-tree-id360 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -756) (undo-tree-id361 . -1) 757 (742 . 757) (#("t" 0 1 (fontified t)) . -742) (undo-tree-id362 . -1) 743 (735 . 743) (732 . 735) (#("(" 0 1 (fontified t)) . -732) (undo-tree-id363 . -1) 733 (728 . 733) (726 . 728) (710 . 716) (#("W" 0 1 (face font-lock-comment-face fontified t)) . -710) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -711) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -712) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (#("d" 0 1 (face font-lock-comment-face fontified t)) . -713) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -714) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (#("w" 0 1 (face font-lock-comment-face fontified t)) . -715) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) 716) nil (25143 31211 350434 763000) 0 nil])
([nil nil ((762 . 763) (t 25143 31211 352006 649000)) nil (25143 31245 568676 904000) 0 nil])
([nil nil ((815 . 816)) nil (25143 31245 568670 508000) 0 nil])
([nil nil ((nil rear-nonsticky nil 819 . 820) (#("
" 0 1 (fontified nil)) . -869) (817 . 870) 810 (t 25143 31245 574484 308000)) nil (25143 31318 894131 962000) 0 nil])
([nil nil ((912 . 918) (#("f" 0 1 (fontified t face font-lock-string-face)) . -912) (undo-tree-id0 . -1) 913 (902 . 913) (881 . 902) (#("i" 0 1 (fontified t)) . -881) (undo-tree-id1 . -1) (#("d" 0 1 (fontified t)) . -882) (undo-tree-id2 . -1) (#("o" 0 1 (fontified t)) . -883) (undo-tree-id3 . -1) 884 (881 . 884) (#("k" 0 1 (fontified t)) . -881) (undo-tree-id4 . -1) (#("i" 0 1 (fontified t)) . -882) (undo-tree-id5 . -1) (#("l" 0 1 (fontified t)) . -883) (undo-tree-id6 . -1) (#("l" 0 1 (fontified t)) . -884) (undo-tree-id7 . -1) (#("-" 0 1 (fontified t)) . -885) (undo-tree-id8 . -1) 886 (876 . 886) (#("w" 0 1 (fontified t face font-lock-string-face)) . -876) (undo-tree-id9 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -877) (undo-tree-id10 . -1) (#(" " 0 1 (fontified t)) . -878) (undo-tree-id11 . -1) 879 (874 . 879) (871 . 874) (856 . 862) (#("k" 0 1 (fontified t face font-lock-string-face)) . -856) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -857) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -858) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -859) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) 860 (822 . 823) (#("k" 0 1 (fontified t face font-lock-string-face)) . -822) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 823) nil (25143 31318 894118 375000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 921) (undo-tree-id31 . -1) (undo-tree-id32 . 1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (t 25143 31318 899213 152000)) nil (25143 31342 574316 812000) 0 nil])
([nil nil ((919 . 920) (918 . 919) (t 25143 31342 578153 372000)) nil (25143 31351 549567 624000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -964) (undo-tree-id35 . -1) (undo-tree-id36 . 1) (undo-tree-id37 . -1) 965 (958 . 965) (#("y" 0 1 (fontified t face font-lock-string-face)) . -958) (undo-tree-id38 . -1) (#("f" 0 1 (fontified t face font-lock-string-face)) . -959) (undo-tree-id39 . -1) (#("f" 0 1 (fontified t face font-lock-string-face)) . -960) (undo-tree-id40 . -1) 961 (952 . 961) (#("b" 0 1 (fontified t face font-lock-string-face)) . -952) (undo-tree-id41 . -1) 953 (948 . 953) (#("l" 0 1 (fontified t face font-lock-builtin-face)) . -948) (undo-tree-id42 . -1) (#("e" 0 1 (fontified t face font-lock-builtin-face)) . -949) (undo-tree-id43 . -1) 950 (939 . 950) (#(":" 0 1 (fontified t)) . -939) (undo-tree-id44 . -1) (#(" " 0 1 (fontified t)) . -940) (undo-tree-id45 . -1) (#("w" 0 1 (fontified t)) . -941) (undo-tree-id46 . -1) (#("h" 0 1 (fontified t)) . -942) (undo-tree-id47 . -1) 943 (931 . 943) (#("-" 0 1 (fontified t)) . -931) (undo-tree-id48 . -1) 932 (928 . 932) (932 . 933) (929 . 932) (924 . 925) (#(":" 0 1 (fontified t face font-lock-string-face)) . -924) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) 925 (926 . 928) (#(";" 0 1 (fontified t face font-lock-string-face)) . -926) (undo-tree-id52 . -1) (#("(" 0 1 (fontified t face font-lock-string-face)) . -927) (undo-tree-id53 . -1) 928 (924 . 928) (#(":" 0 1 (fontified t face font-lock-string-face)) . -924) (undo-tree-id54 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -925) (undo-tree-id55 . -1) 926 (921 . 926) (918 . 921) (t 25143 31351 553751 639000)) nil (25143 31393 804748 907000) 0 nil])
([nil nil ((177 . 180) (#("a" 0 1 (fontified t face font-lock-comment-face)) . -177) (undo-tree-id56 . -1) 178 (167 . 178) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -167) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -168) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (#("x" 0 1 (fontified t face font-lock-comment-face)) . -169) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -170) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) 171 (t 25143 31393 807860 253000)) nil (25143 31586 868463 250000) 0 nil])
([nil nil ((511 . 526) (#("o" 0 1 (fontified t face font-lock-string-face)) . -511) (undo-tree-id69 . -1) (#("p" 0 1 (fontified t face font-lock-string-face)) . -512) (undo-tree-id70 . -1) 513 (511 . 513) (505 . 511) (#("d" 0 1 (fontified t)) . -505) (undo-tree-id71 . -1) (#("i" 0 1 (fontified t)) . -506) (undo-tree-id72 . -1) 507 (504 . 507) (#("=" 0 1 (fontified t)) . -504) (undo-tree-id73 . -1) (#("w" 0 1 (fontified t)) . -505) (undo-tree-id74 . -1) 506 (491 . 506) (481 . 491) (#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -481) (undo-tree-id75 . -1) 482 (476 . 482) (473 . 476) (t 25143 31586 875214 544000) 472) nil (25143 31638 170950 739000) 0 nil])
([nil nil ((518 . 520) (#("l" 0 1 (fontified t face font-lock-builtin-face)) . -518) (undo-tree-id76 . -1) (#("e" 0 1 (fontified t face font-lock-builtin-face)) . -519) (undo-tree-id77 . -1) 520 (509 . 520) (t 25143 31638 172916 441000)) nil (25143 31673 557316 968000) 0 nil])
([nil nil ((892 . 894) (#(":" 0 1 (fontified t face font-lock-string-face)) . -892) (undo-tree-id78 . -1) 893 (884 . 893) (#("e" 0 1 (fontified t face font-lock-string-face)) . -884) (undo-tree-id79 . -1) 885 (871 . 885) (866 . 871) (#("t" 0 1 (fontified t face font-lock-builtin-face)) . -866) (undo-tree-id80 . -1) 867 (866 . 867) (#("t" 0 1 (fontified t face font-lock-builtin-face)) . -866) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#(" " 0 1 (fontified t)) . -867) (undo-tree-id83 . -1) (undo-tree-id84 . -1) 868 (857 . 868) (#("L" 0 1 (fontified t)) . -857) (undo-tree-id85 . -1) (#(":" 0 1 (fontified t)) . -858) (undo-tree-id86 . -1) (#("w" 0 1 (fontified t)) . -859) (undo-tree-id87 . -1) 860 (856 . 860) (#(":" 0 1 (fontified t)) . -856) (undo-tree-id88 . -1) 857 (854 . 857) (#("p" 0 1 (fontified t)) . -854) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("d" 0 1 (fontified t)) . -855) (undo-tree-id98 . -1) (#("o" 0 1 (fontified t)) . -856) (undo-tree-id99 . -1) (#(" " 0 1 (fontified t)) . -857) (undo-tree-id100 . -1) (#(":" 0 1 (fontified t)) . -858) (undo-tree-id101 . -1) 859 (855 . 859) (#("o" 0 1 (fontified t)) . -855) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (#("r" 0 1 (fontified t)) . -856) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) 857 (856 . 857) (849 . 856) (#("d" 0 1 (fontified t)) . -849) (undo-tree-id120 . -1) (#("o" 0 1 (fontified t)) . -850) (undo-tree-id121 . -1) 851 (838 . 851) (835 . 838) (817 . 835) (809 . 817) (808 . 809) (#("u" 0 1 (fontified t face font-lock-builtin-face)) . -808) (undo-tree-id122 . -1) 809 (800 . 809) (779 . 800) (776 . 779) (t 25143 31673 567330 573000) 775) nil (25143 31936 249140 327000) 0 nil])
([nil nil ((892 . 896) (#("\"" 0 1 (fontified t face font-lock-string-face)) . 892) (undo-tree-id135 . -1) (undo-tree-id136 . -1) 893 (t 25143 31936 255555 24000)) nil (25143 31949 196972 146000) 0 nil])
([nil nil ((895 . 896) (#("-" 0 1 (fontified t face font-lock-string-face)) . -895) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) 896) nil (25143 31949 196960 843000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-string-face)) . 892) (t 25143 31949 206974 199000)) nil (25143 31959 841447 752000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face font-lock-string-face)) . 892) (undo-tree-id157 . 1)) nil (25143 31959 841444 731000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t face font-lock-string-face)) . 892) (undo-tree-id137 . -1) (undo-tree-id138 . 1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1)) nil (25143 31959 841434 947000) 0 nil])
([nil nil ((840 . 841) (#("n" 0 1 (fontified t face font-lock-string-face)) . 840) (t 25143 31959 850496 861000)) nil (25143 32021 198657 925000) 0 nil])
([nil nil ((nil rear-nonsticky nil 475 . 476) (#("
" 0 1 (fontified nil)) . -725) (473 . 726) 472 (t 25143 31984 977369 905000)) nil (25143 32327 531168 983000) 0 nil] [nil nil ((nil rear-nonsticky nil 383 . 384) (#("
" 0 1 (fontified nil)) . -430) (381 . 431) 380 (t 25143 31984 977369 905000)) ((#("
  \"wl\" '(windmove-right :which-key \"move-right\")
" 0 1 (fontified t) 1 2 (fontified nil) 2 3 (fontified nil rear-nonsticky nil) 3 7 (fontified nil face font-lock-string-face) 7 25 (fontified nil) 25 35 (fontified nil face font-lock-builtin-face) 35 36 (fontified nil) 36 48 (fontified nil face font-lock-string-face) 48 49 (fontified nil) 49 50 (fontified nil)) . 381) (undo-tree-id158 . -5) (undo-tree-id159 . -1) (undo-tree-id160 . -49) (undo-tree-id161 . -5) (undo-tree-id162 . -5) (undo-tree-id163 . -1) (undo-tree-id164 . -5) (undo-tree-id165 . -5) (430 . 431) (nil rear-nonsticky t 383 . 384)) (25143 32021 198293 584000) 0 nil])
([nil nil ((478 . 479) (#("h" 0 1 (fontified t face font-lock-string-face)) . 478)) nil (25143 32327 531166 473000) 0 nil])
nil
([nil nil ((525 . 526) (#("l" 0 1 (fontified t face font-lock-string-face)) . 525)) nil (25143 32327 531164 497000) 0 nil])
([nil nil ((574 . 575) (#("j" 0 1 (fontified t face font-lock-string-face)) . 574)) nil (25143 32327 531162 780000) 0 nil])
([nil nil ((621 . 622) (#("k" 0 1 (fontified t face font-lock-string-face)) . 621)) nil (25143 32327 531161 35000) 0 nil])
([nil nil ((1097 . 1102) (1076 . 1097) (935 . 936) (#("-" 0 1 (fontified t face font-lock-comment-face)) . -935) (undo-tree-id418 . -1) (undo-tree-id419 . -1) 936 (926 . 945) (667 . 684) (1037 . 1040) (906 . 909) (664 . 667) (473 . 476) 472) nil (25143 32327 531158 447000) 0 nil])
([nil nil ((520 . 524) (664 . 667) (923 . 926) (1074 . 1076) (1074 . 1075) 1101) nil (25143 32327 531151 585000) 0 nil])
([nil nil ((492 . 505) (#("m" 0 1 (fontified t)) . -492) (undo-tree-id376 . -1) 493 (490 . 493) (#("=" 0 1 (fontified t)) . -490) (undo-tree-id377 . -1) 491 (490 . 491) (#("." 0 1 (fontified t)) . -490) (undo-tree-id378 . -1) 491 (486 . 491) (#("w" 0 1 (fontified t)) . -486) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (#("i" 0 1 (fontified t)) . -487) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (#("n" 0 1 (fontified t)) . -488) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (#("d" 0 1 (fontified t)) . -489) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (#("m" 0 1 (fontified t)) . -490) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (#("o" 0 1 (fontified t)) . -491) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (#("v" 0 1 (fontified t)) . -492) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (#("e" 0 1 (fontified t)) . -493) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (#("-" 0 1 (fontified t)) . -494) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (#("l" 0 1 (fontified t)) . -495) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (#("e" 0 1 (fontified t)) . -496) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (#("f" 0 1 (fontified t)) . -497) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (#("t" 0 1 (fontified t)) . -498) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) 499) nil (25143 32327 531141 839000) 0 nil])
([nil nil ((710 . 714) (689 . 710) (#("w" 0 1 (fontified t)) . -689) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (#("e" 0 1 (fontified t)) . -690) (undo-tree-id169 . -1) 691 (690 . 691) (#("i" 0 1 (fontified t)) . -690) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (#("n" 0 1 (fontified t)) . -691) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("d" 0 1 (fontified t)) . -692) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (#("m" 0 1 (fontified t)) . -693) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#("o" 0 1 (fontified t)) . -694) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (#("v" 0 1 (fontified t)) . -695) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (#("e" 0 1 (fontified t)) . -696) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (#("-" 0 1 (fontified t)) . -697) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#("l" 0 1 (fontified t)) . -698) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (#("e" 0 1 (fontified t)) . -699) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (#("f" 0 1 (fontified t)) . -700) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (#("t" 0 1 (fontified t)) . -701) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) 702 (576 . 578) (574 . 576) (#("u" 0 1 (fontified t)) . -574) (undo-tree-id206 . -1) (#("i" 0 1 (fontified t)) . -575) (undo-tree-id207 . -1) 576 (572 . 576) (#("0" 0 1 (fontified t)) . -572) (undo-tree-id208 . -1) (#("r" 0 1 (fontified t)) . -573) (undo-tree-id209 . -1) 574 (573 . 574) (552 . 573) (#("w" 0 1 (fontified t)) . -552) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (#("i" 0 1 (fontified t)) . -553) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (#("n" 0 1 (fontified t)) . -554) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (#("d" 0 1 (fontified t)) . -555) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (#("m" 0 1 (fontified t)) . -556) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (#("o" 0 1 (fontified t)) . -557) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (#("v" 0 1 (fontified t)) . -558) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (#("e" 0 1 (fontified t)) . -559) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (#("-" 0 1 (fontified t)) . -560) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (#("r" 0 1 (fontified t)) . -561) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (#("i" 0 1 (fontified t)) . -562) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (#("g" 0 1 (fontified t)) . -563) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (#("h" 0 1 (fontified t)) . -564) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (#("t" 0 1 (fontified t)) . -565) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) 566 (584 . 591) (703 . 710) (701 . 703) (#("u" 0 1 (fontified t face font-lock-string-face)) . -701) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (#("p" 0 1 (fontified t face font-lock-string-face)) . -702) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) 703 (647 . 658) (#("d" 0 1 (fontified t face font-lock-string-face)) . -647) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -648) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (#("w" 0 1 (fontified t face font-lock-string-face)) . -649) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -650) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) 651 (537 . 540) (#("w" 0 1 (fontified t face font-lock-string-face)) . -537) (undo-tree-id270 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -538) (undo-tree-id271 . -1) (#("f" 0 1 (fontified t face font-lock-string-face)) . -539) (undo-tree-id272 . -1) 540 (538 . 540) (#("e" 0 1 (fontified t face font-lock-string-face)) . -538) (undo-tree-id273 . -1) (#("f" 0 1 (fontified t face font-lock-string-face)) . -539) (undo-tree-id274 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -540) (undo-tree-id275 . -1) 541 (539 . 541) (529 . 539) (#("l" 0 1 (fontified t face font-lock-string-face)) . -529) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (#("w" 0 1 (fontified t face font-lock-string-face)) . -530) (undo-tree-id279 . -1) 531 (530 . 531) (#("e" 0 1 (fontified t face font-lock-string-face)) . -530) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (#("f" 0 1 (fontified t face font-lock-string-face)) . -531) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -532) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (#("v" 0 1 (fontified t face font-lock-string-face)) . -533) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -534) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -535) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -536) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) 537 (621 . 626) (#("t" 0 1 (fontified t)) . -621) (undo-tree-id301 . -1) 622 (619 . 622) (611 . 619) (#("v" 0 1 (fontified t)) . -611) (undo-tree-id302 . -1) (#("e" 0 1 (fontified t)) . -612) (undo-tree-id303 . -1) 613 (610 . 613) (#("=" 0 1 (fontified t)) . -610) (undo-tree-id304 . -1) 611 (598 . 611) (#("w" 0 1 (fontified t)) . -598) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (#("i" 0 1 (fontified t)) . -599) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (#("n" 0 1 (fontified t)) . -600) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (#("d" 0 1 (fontified t)) . -601) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) 602 (#("m" 0 1 (fontified t)) . -602) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (#("o" 0 1 (fontified t)) . -603) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (#("v" 0 1 (fontified t)) . -604) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (#("e" 0 1 (fontified t)) . -605) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (#("-" 0 1 (fontified t)) . -606) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (#("d" 0 1 (fontified t)) . -607) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (#("o" 0 1 (fontified t)) . -608) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (#("w" 0 1 (fontified t)) . -609) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (#("n" 0 1 (fontified t)) . -610) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) 611 (501 . 511) (#("v" 0 1 (fontified t)) . -501) (undo-tree-id344 . -1) (#("e" 0 1 (fontified t)) . -502) (undo-tree-id345 . -1) 503 (501 . 503) (#("e" 0 1 (fontified t)) . -501) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (#("e" 0 1 (fontified t)) . -502) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (#("v" 0 1 (fontified t)) . -503) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (#("i" 0 1 (fontified t)) . -504) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) 505) nil (25143 32327 531050 51000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -1574) (undo-tree-id457 . -2) (undo-tree-id458 . -2) (undo-tree-id459 . -2) 1576 (1574 . 1576) (#("  " 0 2 (fontified nil)) . 1573) (undo-tree-id460 . -2) (undo-tree-id461 . -2) (1573 . 1576) (#("  " 0 2 (fontified nil)) . 1572) (undo-tree-id462 . -2) (undo-tree-id463 . -2) (1572 . 1575) (#("  " 0 2 (fontified nil)) . 1571) (undo-tree-id464 . -2) (undo-tree-id465 . -2) (1573 . 1574) (1570 . 1573) (t 25143 32327 533997 754000) 1569) nil (25143 32521 521149 610000) 0 nil])
([nil nil ((1381 . 1382) (1377 . 1381) (#("u" 0 1 (fontified t face font-lock-string-face)) . -1377) (undo-tree-id437 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -1378) (undo-tree-id438 . -1) (#("g" 0 1 (fontified t face font-lock-string-face)) . -1379) (undo-tree-id439 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -1380) (undo-tree-id440 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -1381) (undo-tree-id441 . -1) 1382 (1372 . 1382) (#("t" 0 1 (fontified t face font-lock-string-face)) . -1372) (undo-tree-id442 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -1373) (undo-tree-id443 . -1) (#("-" 0 1 (fontified t face font-lock-string-face)) . -1374) (undo-tree-id444 . -1) 1375 (1365 . 1375) (1349 . 1365) (#("i" 0 1 (fontified t face font-lock-builtin-face)) . -1349) (undo-tree-id445 . -1) (#("c" 0 1 (fontified t face font-lock-builtin-face)) . -1350) (undo-tree-id446 . -1) 1351 (1340 . 1351) (#("e" 0 1 (fontified t)) . -1340) (undo-tree-id447 . -1) (#("h" 0 1 (fontified t)) . -1341) (undo-tree-id448 . -1) (#("g" 0 1 (fontified t)) . -1342) (undo-tree-id449 . -1) (#("i" 0 1 (fontified t)) . -1343) (undo-tree-id450 . -1) (#("t" 0 1 (fontified t)) . -1344) (undo-tree-id451 . -1) 1345 (1337 . 1345) (#("t" 0 1 (fontified t)) . -1337) (undo-tree-id452 . -1) (#("e" 0 1 (fontified t)) . -1338) (undo-tree-id453 . -1) 1339 (#("-" 0 1 (fontified t)) . -1339) (undo-tree-id454 . -1) 1340 (1319 . 1340) (1312 . 1320) (1310 . 1312) (#("  " 0 2 (fontified nil)) . 1309) (undo-tree-id455 . -2) (1308 . 1312) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -1576) (undo-tree-id456 . -1) 1577 (1574 . 1577)) nil (25143 32521 521127 87000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1385 . 1386) (#("
" 0 1 (fontified nil)) . -1457) (1383 . 1458) 1381) nil (25143 32521 521088 64000) 0 nil])
([nil nil ((1440 . 1442) (#("i" 0 1 (fontified t face font-lock-string-face)) . -1440) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -1441) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) 1442 (1405 . 1407) (#("i" 0 1 (fontified t)) . -1405) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (#("d" 0 1 (fontified t)) . -1406) (undo-tree-id429 . -1) (#("e" 0 1 (fontified t)) . -1407) (undo-tree-id430 . -1) 1408 (1406 . 1408) (#("n" 0 1 (fontified t)) . -1406) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) 1407 (1388 . 1389) (#("+" 0 1 (fontified t face font-lock-string-face)) . -1388) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) 1389) nil (25143 32525 117208 656000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -1519) (undo-tree-id529 . -1) (#("i" 0 1 (fontified t)) . -1520) (undo-tree-id530 . -1) (#("n" 0 1 (fontified t)) . -1521) (undo-tree-id531 . -1) (#("d" 0 1 (fontified t)) . -1522) (undo-tree-id532 . -1) (#("o" 0 1 (fontified t)) . -1523) (undo-tree-id533 . -1) (#("w" 0 1 (fontified t)) . -1524) (undo-tree-id534 . -1) 1525 (1515 . 1525) (1512 . 1515) (1462 . 1463) (#("+" 0 1 (fontified t face font-lock-string-face)) . -1462) (undo-tree-id535 . -1) (undo-tree-id536 . -1) 1463 (1495 . 1510) (1494 . 1497) (#(":" 0 1 (fontified t)) . -1494) (undo-tree-id537 . -1) 1495 (1490 . 1495) (#("k" 0 1 (fontified t face font-lock-builtin-face)) . -1490) (undo-tree-id538 . -1) 1491 (1490 . 1491) (#("j" 0 1 (fontified t face font-lock-builtin-face)) . -1490) (undo-tree-id539 . -1) 1491 (1489 . 1491) (1470 . 1489) (#("e" 0 1 (fontified t)) . -1470) (undo-tree-id540 . -1) 1471 (1460 . 1471) (1457 . 1460) (t 25143 32521 525285 898000) 1456) nil (25143 32722 515282 337000) 0 nil] [nil nil ((1440 . 1446) (#("d" 0 1 (fontified t face font-lock-string-face)) . 1440) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) 1441 (t 25143 32521 525285 898000)) ((1440 . 1441) (#("eck-cp" 0 6 (fontified t face font-lock-string-face)) . 1440) (undo-tree-id469 . -5) (undo-tree-id470 . -5) (undo-tree-id471 . -5)) (25143 32525 116879 268000) 0 nil])
([nil nil ((1582 . 1584) (1574 . 1575) (#("t" 0 1 (fontified t face font-lock-string-face)) . 1574) (1568 . 1570) (#("i" 0 1 (fontified t face font-lock-string-face)) . -1568) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -1569) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) 1570 (1534 . 1536) (#("i" 0 1 (fontified t)) . -1534) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (#("n" 0 1 (fontified t)) . -1535) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) 1536 (1562 . 1582) (#("n" 0 1 (fontified t face font-lock-string-face)) . -1562) (undo-tree-id506 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -1563) (undo-tree-id507 . -1) (#("d" 0 1 (fontified t face font-lock-string-face)) . -1564) (undo-tree-id508 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -1565) (undo-tree-id509 . -1) 1566 (1561 . 1566) (1551 . 1561) (#("i" 0 1 (fontified t face font-lock-builtin-face)) . -1551) (undo-tree-id510 . -1) (#("d" 0 1 (fontified t face font-lock-builtin-face)) . -1552) (undo-tree-id511 . -1) (#("t" 0 1 (fontified t face font-lock-builtin-face)) . -1553) (undo-tree-id512 . -1) (#("h" 0 1 (fontified t face font-lock-builtin-face)) . -1554) (undo-tree-id513 . -1) (#("-" 0 1 (fontified t face font-lock-builtin-face)) . -1555) (undo-tree-id514 . -1) 1556 (1543 . 1556) (1522 . 1543) (#("-" 0 1 (fontified t)) . -1522) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (#("w" 0 1 (fontified t)) . -1523) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) 1524 (1522 . 1524) (1521 . 1522) (1519 . 1521)) nil (25143 32722 514902 82000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 1586 . 1587) (#("
" 0 1 (fontified nil)) . -1656) (1584 . 1657) 1583) nil (25143 32722 514843 117000) 0 nil])
([nil nil ((1589 . 1590) (#("<" 0 1 (fontified t face font-lock-string-face)) . -1589) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) 1590 (1640 . 1642) (#("d" 0 1 (fontified t face font-lock-string-face)) . -1640) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -1641) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) 1642 (1606 . 1608) (#("d" 0 1 (fontified t)) . -1606) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (#("e" 0 1 (fontified t)) . -1607) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) 1608) nil (25143 32722 514833 544000) 0 nil])
([nil nil ((1588 . 1589) (#("e" 0 1 (fontified t face font-lock-string-face)) . -1588) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -1589) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (#("k" 0 1 (fontified t face font-lock-string-face)) . -1590) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) 1591 (1588 . 1591) (#("w" 0 1 (fontified t face font-lock-string-face)) . 1588) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) 1589 (t 25143 32722 516255 56000)) nil (25143 32727 93767 653000) 0 nil])
([nil nil ((nil rear-nonsticky nil 537 . 538) (nil fontified nil 207 . 538) (207 . 538) (t 25143 32727 96049 227000)) nil (25143 32987 566471 752000) 0 nil])
([nil nil ((1965 . 1971) (#("d" 0 1 (fontified t face font-lock-string-face)) . -1965) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (#("f" 0 1 (fontified t face font-lock-string-face)) . -1966) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (#("f" 0 1 (fontified t face font-lock-string-face)) . -1967) (undo-tree-id586 . -1) (undo-tree-id587 . -1) 1968 (1966 . 1968) (#("f" 0 1 (fontified t face font-lock-string-face)) . -1966) (undo-tree-id588 . -1) (undo-tree-id589 . -1) 1967 (1961 . 1967) (1940 . 1961) (1921 . 1940) (#("c" 0 1 (fontified t)) . -1921) (undo-tree-id590 . -1) 1922 (1909 . 1922) (1901 . 1909) (1898 . 1901) (1896 . 1897) (1891 . 1896) (#("c" 0 1 (fontified t face font-lock-string-face)) . -1891) (undo-tree-id591 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -1892) (undo-tree-id592 . -1) 1893 (1876 . 1893) (1862 . 1863) (1874 . 1875) (1865 . 1874) (1863 . 1866) (#(";" 0 1 (fontified t face font-lock-string-face)) . -1863) (undo-tree-id593 . -1) 1864 (1859 . 1864) (1857 . 1859) (#("  " 0 2 (fontified nil)) . 1856) (undo-tree-id594 . -2) (1855 . 1859) (#("
" 0 1 (fontified t)) . -380) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) 381 (#("  (when (and (bound-and-true-p +popup-mode)
             (+popup-window-p))
    (+popup/raise (selected-window)))" 0 3 (fontified t) 3 7 (fontified t face font-lock-keyword-face) 7 9 (fontified t) 9 12 (fontified t face font-lock-keyword-face) 12 14 (fontified t) 14 30 (fontified t face font-lock-keyword-face) 30 113 (fontified t)) . 381) (undo-tree-id598 . -113) (undo-tree-id599 . -113) (#("." 0 1 (fontified t face font-lock-doc-face)) . -358) (undo-tree-id600 . -1) (undo-tree-id601 . -1) 359 (#(" " 0 1 (fontified t face font-lock-doc-face)) . -359) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (#("A" 0 1 (fontified t face font-lock-doc-face)) . -360) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (#("l" 0 1 (fontified t face font-lock-doc-face)) . -361) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (#("t" 0 1 (fontified t face font-lock-doc-face)) . -362) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (#("e" 0 1 (fontified t face font-lock-doc-face)) . -363) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (#("r" 0 1 (fontified t face font-lock-doc-face)) . -364) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (#("n" 0 1 (fontified t face font-lock-doc-face)) . -365) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (#("a" 0 1 (fontified t face font-lock-doc-face)) . -366) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (#("t" 0 1 (fontified t face font-lock-doc-face)) . -367) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (#("i" 0 1 (fontified t face font-lock-doc-face)) . -368) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (#("v" 0 1 (fontified t face font-lock-doc-face)) . -369) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (#("e" 0 1 (fontified t face font-lock-doc-face)) . -370) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (#("l" 0 1 (fontified t face font-lock-doc-face)) . -371) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (#("y" 0 1 (fontified t face font-lock-doc-face)) . -372) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (#("," 0 1 (fontified t face font-lock-doc-face)) . -373) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (#(" " 0 1 (fontified t face font-lock-doc-face)) . -374) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (#("u" 0 1 (fontified t face font-lock-doc-face)) . -375) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (#("s" 0 1 (fontified t face font-lock-doc-face)) . -376) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (#("e" 0 1 (fontified t face font-lock-doc-face)) . -377) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (#(" " 0 1 (fontified t face font-lock-doc-face)) . -378) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (#("`" 0 1 (fontified nil face font-lock-doc-face)) . -379) (undo-tree-id642 . -1) (undo-tree-id643 . -1) 380 (#("d" 0 1 (fontified t face font-lock-doc-face)) . -380) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (#("o" 0 1 (fontified t face font-lock-doc-face)) . -381) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (#("o" 0 1 (fontified t face font-lock-doc-face)) . -382) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (#("m" 0 1 (fontified t face font-lock-doc-face)) . -383) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (#("/" 0 1 (fontified t face font-lock-doc-face)) . -384) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (#("w" 0 1 (fontified t face font-lock-doc-face)) . -385) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (#("i" 0 1 (fontified t face font-lock-doc-face)) . -386) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (#("n" 0 1 (fontified t face font-lock-doc-face)) . -387) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (#("d" 0 1 (fontified t face font-lock-doc-face)) . -388) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (#("o" 0 1 (fontified t face font-lock-doc-face)) . -389) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (#("w" 0 1 (fontified t face font-lock-doc-face)) . -390) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (#("-" 0 1 (fontified t face font-lock-doc-face)) . -391) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (#("e" 0 1 (fontified t face font-lock-doc-face)) . -392) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (#("n" 0 1 (fontified t face font-lock-doc-face)) . -393) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (#("l" 0 1 (fontified t face font-lock-doc-face)) . -394) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (#("a" 0 1 (fontified t face font-lock-doc-face)) . -395) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (#("r" 0 1 (fontified t face font-lock-doc-face)) . -396) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (#("g" 0 1 (fontified t face font-lock-doc-face)) . -397) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (#("e" 0 1 (fontified t face font-lock-doc-face)) . -398) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (#("n" 0 1 (fontified t face font-lock-doc-face)) . -399) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (#("'" 0 1 (fontified t face font-lock-doc-face)) . -400) (undo-tree-id684 . -1) (undo-tree-id685 . -1) 401 (227 . 233) (208 . 227) (206 . 208) (214 . 216) (#("d" 0 1 (fontified t face font-lock-function-name-face)) . -214) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (#("o" 0 1 (fontified t face font-lock-function-name-face)) . -215) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (#("o" 0 1 (fontified t face font-lock-function-name-face)) . -216) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (#("m" 0 1 (fontified t face font-lock-function-name-face)) . -217) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) 218) nil (25143 32987 566445 116000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2235) (t 25143 32987 576338 478000)) nil (25143 33049 715615 800000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2235)) nil (25143 33049 715613 882000) 0 nil])
([nil nil ((#("  
" 0 2 (fontified t) 2 3 (fontified t)) . 2235) (undo-tree-id834 . -1) 2236) nil (25143 33049 715612 123000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . -363) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (#("P" 0 1 (fontified t face font-lock-string-face)) . -364) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -365) (undo-tree-id796 . -1) (undo-tree-id797 . -1) 366 (#("&" 0 1 (fontified t)) . -268) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -269) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (#("p" 0 1 (fontified t face font-lock-type-face)) . -270) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -271) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -272) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -273) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -274) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -275) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (#("l" 0 1 (fontified t face font-lock-type-face)) . -276) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (#(" " 0 1 (fontified t)) . -277) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (#("a" 0 1 (fontified t)) . -278) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (#("r" 0 1 (fontified t)) . -279) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) 280 (#("g" 0 1 (fontified t)) . 280)) nil (25143 33049 715603 381000) 0 nil])
([nil nil ((#(";; Stolen from doom-emacs
(defun bp/window-maximize-buffer ()
  \"Close other windows to focus on this one.
Use `winner-undo' to undo this.\"
  (interactive )
  (delete-other-windows))

" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 25 (fontified t face font-lock-comment-face) 25 26 (fontified t face font-lock-comment-face) 26 27 (fontified t) 27 32 (fontified t face font-lock-keyword-face) 32 33 (fontified t) 33 35 (fontified t face font-lock-function-name-face) 35 58 (fontified t face font-lock-function-name-face) 58 60 (fontified t) 60 62 (fontified t) 62 64 (fontified t) 64 107 (fontified t face font-lock-doc-face) 107 112 (fontified t face font-lock-doc-face) 112 123 (fontified t face (font-lock-constant-face font-lock-doc-face)) 123 137 (fontified t face font-lock-doc-face) 137 139 (fontified t face font-lock-doc-face) 139 140 (fontified t) 140 143 (fontified t) 143 154 (fontified t face font-lock-keyword-face) 154 155 (fontified t) 155 156 (fontified t) 156 157 (fontified t) 157 181 (fontified t) 181 182 (rear-nonsticky t fontified t) 182 183 (fontified t) 183 184 (fontified t)) . 208) (undo-tree-id776 . -183) (undo-tree-id777 . -26) (undo-tree-id778 . -181) (undo-tree-id779 . 123) (undo-tree-id780 . -183) (undo-tree-id781 . -184) (undo-tree-id782 . -26) (undo-tree-id783 . -33) (undo-tree-id784 . -182) (undo-tree-id785 . -182) (undo-tree-id786 . -182) (undo-tree-id787 . -182) (undo-tree-id788 . -182) (undo-tree-id789 . -182) (undo-tree-id790 . -61) (undo-tree-id791 . -183)) nil (25143 33049 716261 879000) 0 nil])
([nil nil ((535 . 537) (#("d" 0 1 (fontified t face font-lock-function-name-face)) . -535) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (#("o" 0 1 (fontified t face font-lock-function-name-face)) . -536) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (#("o" 0 1 (fontified t face font-lock-function-name-face)) . -537) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (#("m" 0 1 (fontified t face font-lock-function-name-face)) . -538) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) 539 (231 . 232) (#("o" 0 1 (fontified t face font-lock-function-name-face)) . -231) (undo-tree-id1024 . -1) (#("p" 0 1 (fontified t face font-lock-function-name-face)) . -232) (undo-tree-id1025 . -1) 233 (230 . 233) (#("d" 0 1 (fontified t face font-lock-function-name-face)) . -230) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (#("o" 0 1 (fontified t face font-lock-function-name-face)) . -231) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (#("o" 0 1 (fontified t face font-lock-function-name-face)) . -232) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (#("m" 0 1 (fontified t face font-lock-function-name-face)) . -233) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) 234 (nil rear-nonsticky nil 805 . 806) (nil fontified nil 208 . 806) (208 . 806) (206 . 208) (1761 . 1762) (#("w" 0 1 (fontified t face font-lock-string-face)) . -1761) (undo-tree-id1034 . -1) 1762 (1761 . 1762) (#("s" 0 1 (fontified t face font-lock-string-face)) . -1761) (undo-tree-id1035 . -1) 1762 (1750 . 1762) (1742 . 1750) (#("w" 0 1 (fontified t face font-lock-string-face)) . -1742) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) 1743 (#("i" 0 1 (fontified t face font-lock-string-face)) . -1743) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -1744) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (#("d" 0 1 (fontified t face font-lock-string-face)) . -1745) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -1746) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (#("w" 0 1 (fontified t face font-lock-string-face)) . -1747) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (#("-" 0 1 (fontified t face font-lock-string-face)) . -1748) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -1749) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -1750) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (#("x" 0 1 (fontified t face font-lock-string-face)) . -1751) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -1752) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -1753) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -1754) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (#("z" 0 1 (fontified t face font-lock-string-face)) . -1755) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -1756) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (#("-" 0 1 (fontified t face font-lock-string-face)) . -1757) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (#("b" 0 1 (fontified t face font-lock-string-face)) . -1758) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -1759) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (#("f" 0 1 (fontified t face font-lock-string-face)) . -1760) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (#("f" 0 1 (fontified t face font-lock-string-face)) . -1761) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -1762) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -1763) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) 1764 (1709 . 1729) (#("b" 0 1 (fontified t)) . -1709) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (#("p" 0 1 (fontified t)) . -1710) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (#("/" 0 1 (fontified t)) . -1711) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (#("w" 0 1 (fontified t)) . -1712) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) 1713 (#("i" 0 1 (fontified t)) . -1713) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (#("n" 0 1 (fontified t)) . -1714) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (#("d" 0 1 (fontified t)) . -1715) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (#("o" 0 1 (fontified t)) . -1716) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (#("w" 0 1 (fontified t)) . -1717) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (#("-" 0 1 (fontified t)) . -1718) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (#("m" 0 1 (fontified t)) . -1719) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (#("a" 0 1 (fontified t)) . -1720) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (#("x" 0 1 (fontified t)) . -1721) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (#("i" 0 1 (fontified t)) . -1722) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (#("m" 0 1 (fontified t)) . -1723) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (#("i" 0 1 (fontified t)) . -1724) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (#("z" 0 1 (fontified t)) . -1725) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (#("e" 0 1 (fontified t)) . -1726) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (#("-" 0 1 (fontified t)) . -1727) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (#("b" 0 1 (fontified t)) . -1728) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (#("u" 0 1 (fontified t)) . -1729) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (#("f" 0 1 (fontified t)) . -1730) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (#("f" 0 1 (fontified t)) . -1731) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (#("e" 0 1 (fontified t)) . -1732) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (#("r" 0 1 (fontified t)) . -1733) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) 1734) nil (25143 33251 769409 848000) 0 nil] [nil nil ((1730 . 1733) (1722 . 1730) (#("b" 0 1 (fontified t)) . -1722) (undo-tree-id698 . -1) (#("u" 0 1 (fontified t)) . -1723) (undo-tree-id699 . -1) (#("f" 0 1 (fontified t)) . -1724) (undo-tree-id700 . -1) 1725 (1709 . 1725) (#("b" 0 1 (fontified t)) . -1709) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (#("p" 0 1 (fontified t)) . -1710) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (#("/" 0 1 (fontified t)) . -1711) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (#("w" 0 1 (fontified t)) . -1712) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) 1713 (#("i" 0 1 (fontified t)) . -1713) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (#("n" 0 1 (fontified t)) . -1714) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (#("d" 0 1 (fontified t)) . -1715) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (#("o" 0 1 (fontified t)) . -1716) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (#("w" 0 1 (fontified t)) . -1717) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (#("-" 0 1 (fontified t)) . -1718) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (#("m" 0 1 (fontified t)) . -1719) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (#("a" 0 1 (fontified t)) . -1720) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (#("x" 0 1 (fontified t)) . -1721) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (#("i" 0 1 (fontified t)) . -1722) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (#("m" 0 1 (fontified t)) . -1723) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (#("i" 0 1 (fontified t)) . -1724) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (#("z" 0 1 (fontified t)) . -1725) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (#("e" 0 1 (fontified t)) . -1726) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (#("-" 0 1 (fontified t)) . -1727) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (#("b" 0 1 (fontified t)) . -1728) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (#("u" 0 1 (fontified t)) . -1729) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (#("f" 0 1 (fontified t)) . -1730) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (#("f" 0 1 (fontified t)) . -1731) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (#("e" 0 1 (fontified t)) . -1732) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (#("r" 0 1 (fontified t)) . -1733) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) 1734) ((1709 . 1734) (#("delete-other-buf" 0 13 (fontified nil) 13 14 (fontified nil) 14 15 (fontified nil) 15 16 (fontified nil)) . 1709) (undo-tree-id835 . -13) (undo-tree-id836 . -16) (undo-tree-id837 . -13) (undo-tree-id838 . -13) (undo-tree-id839 . -13) (1722 . 1725) (#("windowsd" 0 8 (fontified nil)) . 1722) (undo-tree-id840 . -7) (undo-tree-id841 . -8) (undo-tree-id842 . -7) (undo-tree-id843 . -8) (undo-tree-id844 . -8) (#("let" 0 3 (fontified t)) . 1730) (undo-tree-id845 . -2) (undo-tree-id846 . -2) (undo-tree-id847 . -2)) (25143 33049 715514 473000) 0 nil])
([nil nil ((#(";;;###autoload
" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 6 (fontified t face font-lock-comment-face) 6 14 (fontified t face (font-lock-warning-face font-lock-comment-face)) 14 15 (fontified t face font-lock-comment-face)) . 513) (undo-tree-id1014 . -12) (undo-tree-id1015 . -12) 525) nil (25143 33251 769316 913000) 0 nil])
nil
([nil nil ((#(";;;###autoload
" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 6 (fontified t face font-lock-comment-face) 6 14 (fontified t face (font-lock-warning-face font-lock-comment-face)) 14 15 (fontified t face font-lock-comment-face)) . 208) (undo-tree-id1011 . -14) (undo-tree-id1012 . -13) (undo-tree-id1013 . -13) 221) nil (25143 33251 769314 556000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2332 . 2333) (#("
" 0 1 (fontified nil)) . -2396) (2330 . 2397) 2319) nil (25143 33251 769292 230000) 0 nil])
([nil nil ((2402 . 2404) (#("i" 0 1 (fontified t face font-lock-string-face)) . -2402) (undo-tree-id884 . -1) (undo-tree-id885 . -1) 2403 (2351 . 2360) (#("m" 0 1 (fontified t)) . -2344) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (#("a" 0 1 (fontified t)) . -2345) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (#("x" 0 1 (fontified t)) . -2346) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (#("i" 0 1 (fontified t)) . -2347) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (#("m" 0 1 (fontified t)) . -2348) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (#("i" 0 1 (fontified t)) . -2349) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (#("z" 0 1 (fontified t)) . -2350) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (#("e" 0 1 (fontified t)) . -2351) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (#("-" 0 1 (fontified t)) . -2352) (undo-tree-id902 . -1) (undo-tree-id903 . -1) 2353 (#("s" 0 1 (fontified t)) . -2359) (undo-tree-id904 . -1) (undo-tree-id905 . -1) 2360 (2393 . 2400) (2400 . 2402) (2384 . 2400) (#("d" 0 1 (fontified t face font-lock-string-face)) . -2384) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -2385) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -2386) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -2387) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -2388) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -2389) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (#("-" 0 1 (fontified t face font-lock-string-face)) . -2390) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -2391) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -2392) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -2393) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -2394) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -2395) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (#("-" 0 1 (fontified t face font-lock-string-face)) . -2396) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (#("w" 0 1 (fontified t face font-lock-string-face)) . -2397) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -2398) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -2399) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (#("d" 0 1 (fontified t face font-lock-string-face)) . -2400) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -2401) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (#("w" 0 1 (fontified t face font-lock-string-face)) . -2402) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -2403) (undo-tree-id944 . -1) (undo-tree-id945 . -1) 2404 (2336 . 2337) (#("m" 0 1 (fontified t face font-lock-string-face)) . 2336) (#("t" 0 1 (fontified t)) . -2371) (undo-tree-id946 . -1) 2372 (2361 . 2372) (2350 . 2361) (#("n" 0 1 (fontified t)) . -2350) (undo-tree-id947 . -1) (#("z" 0 1 (fontified t)) . -2351) (undo-tree-id948 . -1) (#("e" 0 1 (fontified t)) . -2352) (undo-tree-id949 . -1) 2353 (2346 . 2353) (#("c" 0 1 (fontified t)) . -2346) (undo-tree-id950 . -1) 2347 (2341 . 2347) (#("d" 0 1 (fontified t)) . -2341) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (#("e" 0 1 (fontified t)) . -2342) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (#("l" 0 1 (fontified t)) . -2343) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (#("e" 0 1 (fontified t)) . -2344) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (#("t" 0 1 (fontified t)) . -2345) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (#("e" 0 1 (fontified t)) . -2346) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (#("-" 0 1 (fontified t)) . -2347) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (#("o" 0 1 (fontified t)) . -2348) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (#("t" 0 1 (fontified t)) . -2349) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (#("h" 0 1 (fontified t)) . -2350) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (#("e" 0 1 (fontified t)) . -2351) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (#("r" 0 1 (fontified t)) . -2352) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (#("-" 0 1 (fontified t)) . -2353) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (#("w" 0 1 (fontified t)) . -2354) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (#("i" 0 1 (fontified t)) . -2355) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (#("n" 0 1 (fontified t)) . -2356) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (#("d" 0 1 (fontified t)) . -2357) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (#("o" 0 1 (fontified t)) . -2358) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (#("w" 0 1 (fontified t)) . -2359) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (#("s" 0 1 (fontified t)) . -2360) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) 2361) nil (25143 33251 769280 923000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -2492) (2411 . 2493) 2403) nil (25143 33251 769190 316000) 0 nil])
([nil current ((2491 . 2495) (2483 . 2491) (#("r" 0 1 (fontified t face font-lock-string-face)) . -2483) (undo-tree-id848 . -1) 2484 (2482 . 2484) (#("v" 0 1 (fontified t face font-lock-string-face)) . -2482) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -2483) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -2484) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -2485) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -2486) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -2487) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -2488) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -2489) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -2490) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (#("y" 0 1 (fontified t face font-lock-string-face)) . -2491) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) 2492 (2441 . 2453) (#("vertically" 0 10 (fontified t)) . 2441) (undo-tree-id879 . -10) (undo-tree-id880 . -10) (2417 . 2418) (#("v" 0 1 (fontified t face font-lock-string-face)) . -2417) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) 2418) nil (25143 33251 769184 94000) 0 nil])
nil
