(undo-tree-save-format-version . 1)
"cdca0ef1e04ce58091632d774291d8e0411abe70"
[nil nil nil nil (25143 27719 269711 576000) 0 nil]
([nil nil ((nil rear-nonsticky nil 749 . 750) (nil fontified nil 1 . 750) (1 . 750) (t 25143 27582 124509 446000)) nil (25143 27719 269709 219000) 0 nil])
([nil nil ((#("rational" 0 8 (face font-lock-comment-face fontified t)) . 709) (717 . 719) (#("rational" 0 8 (face font-lock-constant-face fontified t)) . 693) (701 . 703) (#("rational" 0 8 (face font-lock-comment-face fontified t)) . 5) (13 . 15)) nil (25143 27719 270015 807000) 0 nil])
([nil nil ((#("straight-" 0 9 (fontified t)) . 225) (234 . 234) (#("straight-" 0 9 (fontified t)) . 200) (209 . 209)) nil (25143 27756 392958 324000) 0 nil] [nil nil ((1 . 2) (1 . 2) (#(";;; bp-editing.el -*- lexical-binding: t; -*-

;; Copyright (C) 2022
;; SPDX-License-Identifier: MIT

;; Author: System Crafters Community

;; Commentary

;; Editing text configuration.

;;; Code:

(straight-use-package 'ws-butler)
(straight-use-package 'evil-nerd-commenter)

;; Set up ws-butler for trimming whitespace and line endings
(add-hook 'text-mode-hook 'ws-butler-mode)
(add-hook 'prog-mode-hook 'ws-butler-mode)

;; Set a global binding for better line commenting/uncommenting
(global-set-key (kbd \"M-/\") 'evilnc-comment-or-uncomment-lines)

;; parentheses
(electric-pair-mode 1) ; auto-insert matching bracket
(show-paren-mode 1)    ; turn on paren match highlighting

(provide 'bp-editing)
;;; bp-editing.el ends here" 0 4 (face font-lock-comment-delimiter-face fontified t) 4 6 (face font-lock-comment-face fontified t) 6 46 (face font-lock-comment-face fontified t) 46 47 (fontified t) 47 50 (face font-lock-comment-delimiter-face fontified t) 50 69 (face font-lock-comment-face fontified t) 69 72 (face font-lock-comment-delimiter-face fontified t) 72 101 (face font-lock-comment-face fontified t) 101 102 (fontified t) 102 105 (face font-lock-comment-delimiter-face fontified t) 105 139 (face font-lock-comment-face fontified t) 139 140 (fontified t) 140 143 (face font-lock-comment-delimiter-face fontified t) 143 154 (face font-lock-comment-face fontified t) 154 155 (fontified t) 155 158 (face font-lock-comment-delimiter-face fontified t) 158 186 (face font-lock-comment-face fontified t) 186 187 (fontified t) 187 191 (face font-lock-comment-delimiter-face fontified t) 191 197 (face font-lock-comment-face fontified t) 197 277 (fontified t) 277 280 (face font-lock-comment-delimiter-face fontified t) 280 338 (face font-lock-comment-face fontified t) 338 425 (fontified t) 425 428 (face font-lock-comment-delimiter-face fontified t) 428 489 (face font-lock-comment-face fontified t) 489 510 (fontified t) 510 515 (face font-lock-string-face fontified t) 515 554 (fontified t) 554 557 (face font-lock-comment-delimiter-face fontified t) 557 569 (face font-lock-comment-face fontified t) 569 592 (fontified t) 592 594 (face font-lock-comment-delimiter-face fontified t) 594 623 (face font-lock-comment-face fontified t) 623 646 (fontified t) 646 648 (face font-lock-comment-delimiter-face fontified t) 648 681 (face font-lock-comment-face fontified t) 681 682 (fontified t) 682 683 (fontified t) 683 690 (face font-lock-keyword-face fontified t) 690 692 (fontified t) 692 694 (face font-lock-constant-face fontified t) 694 702 (face font-lock-constant-face fontified t) 702 704 (fontified t) 704 708 (face font-lock-comment-delimiter-face fontified t) 708 710 (face font-lock-comment-face fontified t) 710 730 (face font-lock-comment-face fontified t) 730 731 (face font-lock-comment-face fontified t rear-nonsticky t)) . 1) (undo-tree-id0 . -704) (undo-tree-id1 . -730) (undo-tree-id2 . -704) (undo-tree-id3 . -704) (undo-tree-id4 . -704) (undo-tree-id5 . -731) (undo-tree-id6 . -731) (undo-tree-id7 . -704) (undo-tree-id8 . -704) (undo-tree-id9 . -704) (undo-tree-id10 . -704) (undo-tree-id11 . -704) (undo-tree-id12 . -704) (undo-tree-id13 . -730) (undo-tree-id14 . -704) (undo-tree-id15 . -704) (undo-tree-id16 . -704) (undo-tree-id17 . -704) (undo-tree-id18 . -704) (undo-tree-id19 . -704) (undo-tree-id20 . -704) (undo-tree-id21 . -730) (undo-tree-id22 . -704) (undo-tree-id23 . -704) (undo-tree-id24 . -704) (undo-tree-id25 . -704) (undo-tree-id26 . -704) (undo-tree-id27 . -704) (undo-tree-id28 . -704) (undo-tree-id29 . -704) (undo-tree-id30 . -704) (undo-tree-id31 . -704) (undo-tree-id32 . -704) (undo-tree-id33 . -704) (undo-tree-id34 . -730) (undo-tree-id35 . -704) (undo-tree-id36 . -704) (undo-tree-id37 . -704) (undo-tree-id38 . -704) (undo-tree-id39 . -704) (undo-tree-id40 . -704) (undo-tree-id41 . -704) (undo-tree-id42 . -704) (undo-tree-id43 . -704) (undo-tree-id44 . -704) (undo-tree-id45 . -704) (undo-tree-id46 . -704) (undo-tree-id47 . -730) (undo-tree-id48 . -704) (undo-tree-id49 . -704) (undo-tree-id50 . -704) (undo-tree-id51 . -704) (undo-tree-id52 . -704) (undo-tree-id53 . -704) (undo-tree-id54 . -704) (undo-tree-id55 . -704) (undo-tree-id56 . -704) (undo-tree-id57 . -704) (undo-tree-id58 . -704) (undo-tree-id59 . -704) (undo-tree-id60 . -730) (undo-tree-id61 . -704) (undo-tree-id62 . -704) (undo-tree-id63 . -704) (undo-tree-id64 . -704) (undo-tree-id65 . -704) (undo-tree-id66 . -704) (undo-tree-id67 . -704) (undo-tree-id68 . -704) (undo-tree-id69 . -704) (undo-tree-id70 . -704) (undo-tree-id71 . -704) (undo-tree-id72 . -704) (undo-tree-id73 . -730) (undo-tree-id74 . -704) (undo-tree-id75 . -704) (undo-tree-id76 . -704) (undo-tree-id77 . -704) (undo-tree-id78 . -704) (undo-tree-id79 . -704) (undo-tree-id80 . -704) (undo-tree-id81 . -704) (undo-tree-id82 . -704) (undo-tree-id83 . -704) (undo-tree-id84 . -704) (undo-tree-id85 . -704) (undo-tree-id86 . -730) (undo-tree-id87 . -704) (undo-tree-id88 . -704) (undo-tree-id89 . -704) (undo-tree-id90 . -704) (undo-tree-id91 . -704) (undo-tree-id92 . -704) (undo-tree-id93 . -704) (undo-tree-id94 . -704) (undo-tree-id95 . -704) (undo-tree-id96 . -704) (undo-tree-id97 . -704) (undo-tree-id98 . -704) (undo-tree-id99 . -704) (undo-tree-id100 . -704) (undo-tree-id101 . -704) (undo-tree-id102 . -704) (undo-tree-id103 . -704) (undo-tree-id104 . -704) 705) ((1 . 732) (#("
" 0 1 (fontified nil)) . 1) (undo-tree-id105 . 1) (#(":" 0 1 (fontified t)) . 1)) (25143 27719 269688 707000) 0 nil])
([nil nil ((#("
(use-package 'ws-butler)
(use-package 'evil-nerd-commenter)

;; Set up ws-butler for trimming whitespace and line endings
(add-hook 'text-mode-hook 'ws-butler-mode)
(add-hook 'prog-mode-hook 'ws-butler-mode)

;; Set a global binding for better line commenting/uncommenting
(global-set-key (kbd \"M-/\") 'evilnc-comment-or-uncomment-lines)

;; parentheses
(electric-pair-mode 1) ; auto-insert matching bracket
(show-paren-mode 1)    ; turn on paren match highlighting

" 0 1 (fontified t) 1 2 (fontified t) 2 13 (face font-lock-keyword-face fontified t) 13 15 (fontified t) 15 24 (face font-lock-constant-face fontified t) 24 26 (fontified t) 26 27 (fontified t) 27 38 (face font-lock-keyword-face fontified t) 38 40 (fontified t) 40 59 (face font-lock-constant-face fontified t) 59 60 (fontified t) 60 61 (fontified t) 61 62 (fontified t) 62 65 (face font-lock-comment-delimiter-face fontified t) 65 123 (face font-lock-comment-face fontified t) 123 210 (fontified t) 210 213 (face font-lock-comment-delimiter-face fontified t) 213 274 (face font-lock-comment-face fontified t) 274 295 (fontified t) 295 300 (face font-lock-string-face fontified t) 300 339 (fontified t) 339 342 (face font-lock-comment-delimiter-face fontified t) 342 354 (face font-lock-comment-face fontified t) 354 377 (fontified t) 377 379 (face font-lock-comment-delimiter-face fontified t) 379 408 (face font-lock-comment-face fontified t) 408 431 (fontified t) 431 433 (face font-lock-comment-delimiter-face fontified t) 433 466 (face font-lock-comment-face fontified t) 466 467 (fontified t)) . 198) (undo-tree-id106 . -466) (undo-tree-id107 . -466) (undo-tree-id108 . -466)) nil (25143 27756 392954 842000) 0 nil])
nil
([nil nil ((198 . 199)) nil (25143 27756 392939 390000) 0 nil])
([nil nil ((#("editing" 0 7 (face font-lock-comment-face fontified t)) . 231) (238 . 246) (#("editing" 0 7 (face font-lock-constant-face fontified t)) . 214) (221 . 229) (160 . 168) ("explorer" . 160) (#("Editing" 0 7 (face font-lock-comment-face fontified t)) . 160) (167 . 175) (#("editing" 0 7 (face font-lock-comment-face fontified t)) . 8) (15 . 23)) nil (25143 27756 392934 347000) 0 nil])
([nil nil ((252 . 253) 224) nil (25143 27756 392924 350000) 0 nil])
([nil nil ((243 . 258) (235 . 243) (#("r" 0 1 (fontified t)) . -235) (undo-tree-id140 . -1) (#("e" 0 1 (fontified t)) . -236) (undo-tree-id141 . -1) 237 (235 . 237) (232 . 235) (228 . 232) (#("i" 0 1 (face font-lock-builtin-face fontified t)) . -228) (undo-tree-id142 . -1) (#("n" 0 1 (face font-lock-builtin-face fontified t)) . -229) (undo-tree-id143 . -1) 230 (225 . 230) (222 . 225) (220 . 223) (202 . 220) (#("y" 0 1 (fontified t)) . -202) (undo-tree-id144 . -1) 203 (201 . 203) (200 . 201) (#("i" 0 1 (fontified t)) . -200) (undo-tree-id145 . -1) (#("
" 0 1 (fontified t)) . -201) (undo-tree-id146 . -1) 202 (201 . 202) (200 . 201) (200 . 201) (t 25143 27756 400441 685000)) nil (25143 27847 966001 142000) 0 nil])
([nil nil ((259 . 260) (#("
" 0 1 (fontified t)) . -259) (undo-tree-id137 . -1) (#(" " 0 1 (fontified t)) . -260) (undo-tree-id138 . -1) (#(" " 0 1 (fontified t)) . -261) (undo-tree-id139 . -1) 262 (259 . 262) 257) nil (25143 27847 965983 92000) 0 nil])
([nil nil ((#("P" 0 1 (fontified t)) . -262) (undo-tree-id136 . -1) 263 (262 . 263) (262 . 263)) nil (25143 27847 965975 809000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1659 . 1660) (nil fontified nil 262 . 1660) (262 . 1660)) nil (25143 27847 965971 116000) 0 nil])
([nil nil ((#("  :when (featurep! :editor evil +everywhere)
" 0 2 (fontified t) 2 7 (face font-lock-builtin-face fontified t) 7 19 (fontified t) 19 26 (face font-lock-builtin-face fontified t) 26 45 (fontified t)) . 1119) (undo-tree-id109 . -31) (undo-tree-id110 . -31) (undo-tree-id111 . -31) (undo-tree-id112 . -31) (undo-tree-id113 . -31) (undo-tree-id114 . -31) (undo-tree-id115 . -31) (undo-tree-id116 . -31) (undo-tree-id117 . -31) (undo-tree-id118 . -31) (undo-tree-id119 . -31) (undo-tree-id120 . -31) (undo-tree-id121 . -31) (undo-tree-id122 . -31) (undo-tree-id123 . -31) (undo-tree-id124 . -31) (undo-tree-id125 . -31) (undo-tree-id126 . -31) (undo-tree-id127 . -31) (undo-tree-id128 . -31) (undo-tree-id129 . -31) (undo-tree-id130 . -31) (undo-tree-id131 . -31) (undo-tree-id132 . -31) (undo-tree-id133 . -31) (undo-tree-id134 . -31) (undo-tree-id135 . -31) 1150) nil (25143 27847 965962 768000) 0 nil])
([nil nil ((#("  (when +treemacs-git-mode
" 0 3 (fontified t) 3 7 (face font-lock-keyword-face fontified t) 7 27 (fontified t)) . 677) (undo-tree-id188 . -26) (undo-tree-id189 . -25) 702 (t 25143 27847 968205 255000)) nil (25143 27906 818036 1000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 1058) (undo-tree-id186 . 1) (undo-tree-id187 . -1)) nil (25143 27906 818031 205000) 0 nil])
([nil nil ((#("
    ;; If they aren't supported, fall back to simpler methods
    (when (and (memq +treemacs-git-mode '(deferred extended))
               (not (executable-find \"python3\")))
      (setq +treemacs-git-mode 'simple))
    (treemacs-git-mode +treemacs-git-mode)
    (setq treemacs-collapse-dirs
          (if (memq treemacs-git-mode '(extended deferred))
              3
" 0 1 (fontified t) 1 5 (fontified t) 5 8 (face font-lock-comment-delimiter-face fontified t) 8 62 (face font-lock-comment-face fontified t) 62 63 (face font-lock-comment-face fontified t) 63 68 (fontified t) 68 72 (face font-lock-keyword-face fontified t) 72 74 (fontified t) 74 77 (face font-lock-keyword-face fontified t) 77 162 (fontified t) 162 171 (face font-lock-string-face fontified t) 171 182 (fontified t) 182 186 (face font-lock-keyword-face fontified t) 186 264 (fontified t) 264 268 (face font-lock-keyword-face fontified t) 268 303 (fontified t) 303 305 (face font-lock-keyword-face fontified t) 305 368 (fontified t)) . 676) (undo-tree-id182 . -367) (undo-tree-id183 . -367) (undo-tree-id184 . -367) (undo-tree-id185 . -367) 1043) nil (25143 27906 818027 316000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 689) (undo-tree-id180 . 1) (undo-tree-id181 . -1)) nil (25143 27906 818021 186000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 689) (undo-tree-id178 . 1) (undo-tree-id179 . -1)) nil (25143 27906 818017 368000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 688) (undo-tree-id177 . -1)) nil (25143 27906 818013 508000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -675) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (#(" " 0 1 (fontified t)) . -676) (undo-tree-id152 . -1) (undo-tree-id153 . 1) (undo-tree-id154 . -1) 677 (#(" " 0 1 (fontified t)) . -677) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (#(" " 0 1 (fontified t)) . -678) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (#(" " 0 1 (fontified t)) . -679) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#(" " 0 1 (fontified t)) . -680) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (#(" " 0 1 (fontified t)) . -681) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (#(" " 0 1 (fontified t)) . -682) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (#(" " 0 1 (fontified t)) . -683) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (#(" " 0 1 (fontified t)) . -684) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (#(" " 0 1 (fontified t)) . -685) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (#(" " 0 1 (fontified t)) . -686) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (#(" " 0 1 (fontified t)) . -687) (undo-tree-id175 . -1) (undo-tree-id176 . -1) 688) nil (25143 27906 818005 240000) 0 nil])
([nil nil ((448 . 450) (512 . 521) 492) nil (25143 27906 817949 399000) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t) 8 9 (fontified t)) . 515) (undo-tree-id190 . -8) (undo-tree-id191 . -7) (undo-tree-id192 . -8) (undo-tree-id193 . -8) (undo-tree-id194 . -8) (undo-tree-id195 . -8) (undo-tree-id196 . -8) (undo-tree-id197 . -7) (undo-tree-id198 . -7) (undo-tree-id199 . -7) (undo-tree-id200 . -7) (undo-tree-id201 . -7) (undo-tree-id202 . -7) (undo-tree-id203 . -7) (undo-tree-id204 . -7) (undo-tree-id205 . -7) (undo-tree-id206 . -7) 522 (t 25143 27906 821483 276000)) nil (25143 27911 675151 864000) 0 nil])
([nil nil ((728 . 737) (#(")" 0 1 (fontified t)) . -728) (undo-tree-id262 . -1) (undo-tree-id263 . 1) (undo-tree-id264 . -1) 729 (720 . 729) (#("!" 0 1 (fontified t)) . -692) (undo-tree-id265 . -1) 693 (#("!" 0 1 (fontified t)) . -274) (undo-tree-id266 . -1) (undo-tree-id267 . -1) 275 (719 . 722) (t 25143 27911 677258 723000) 718) nil (25143 28041 484406 684000) 0 nil])
([nil nil ((#("  (after! treemacs (require 'treemacs-evil))
" 0 20 (fontified t) 20 27 (face font-lock-keyword-face fontified t) 27 29 (fontified t) 29 42 (face font-lock-constant-face fontified t) 42 45 (fontified t)) . 746) (undo-tree-id260 . -33) (undo-tree-id261 . -33) 779) nil (25143 28041 484394 556000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -746) (undo-tree-id259 . -2) 748 (746 . 748) (746 . 747) 748) nil (25143 28041 484390 108000) 0 nil])
([nil nil ((nil rear-nonsticky nil 953 . 954) (nil fontified nil 746 . 954) (746 . 954)) nil (25143 28041 484386 291000) 0 nil])
([nil nil ((956 . 957) (746 . 747) (746 . 748) (747 . 749) (#("e" 0 1 (fontified t)) . -747) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (#("f" 0 1 (fontified t)) . -748) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (#("s" 0 1 (fontified t)) . -749) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) 750) nil (25143 28041 484382 428000) 0 nil])
([nil nil ((#("x  (bp/leader-keys
    \"t\"  '(:ignore t :which-key \"toggles\")
    \"tt\" '(counsel-load-theme :which-key \"choose theme\")
    \"fde\" '(lambda () (interactive) (find-file (expand-file-name \"~/.emacs.d/Emacs.org\"))))x" 0 1 (fontified t) 1 3 (fontified t) 3 4 (fontified t) 4 18 (face font-lock-keyword-face fontified t) 18 19 (fontified t) 19 23 (fontified t) 23 26 (face font-lock-string-face fontified t) 26 30 (fontified t) 30 37 (face font-lock-builtin-face fontified t) 37 40 (fontified t) 40 50 (face font-lock-builtin-face fontified t) 50 51 (fontified t) 51 60 (face font-lock-string-face fontified t) 60 66 (fontified t) 66 70 (face font-lock-string-face fontified t) 70 92 (fontified t) 92 102 (face font-lock-builtin-face fontified t) 102 103 (fontified t) 103 117 (face font-lock-string-face fontified t) 117 119 (fontified t) 119 123 (fontified t) 123 128 (face font-lock-string-face fontified t) 128 142 (fontified t) 142 153 (face font-lock-keyword-face fontified t) 153 184 (fontified t) 184 206 (face font-lock-string-face fontified t) 206 209 (fontified t) 209 210 (fontified t rear-nonsticky t) 210 211 (face (font-lock-warning-face) help-echo "Easy to misread; consider moving the element to the next line" fontified t)) . 746) (undo-tree-id234 . -211) (undo-tree-id235 . -4) (undo-tree-id236 . 204) (undo-tree-id237 . -4) (undo-tree-id238 . -4) (undo-tree-id239 . 211) (undo-tree-id240 . -4) (undo-tree-id241 . -24) (undo-tree-id242 . -210) (undo-tree-id243 . -211)) nil (25143 28041 484360 224000) 0 nil])
([nil nil ((959 . 961) (#("x" 0 1 (fontified t)) . -959) (undo-tree-id233 . -1) 960 (959 . 960) (749 . 751)) nil (25143 28041 484345 743000) 0 nil])
([nil nil ((960 . 962) (#("j    ;; REVIEW Fix #1875 to be consistent with C-w {v,s}, but this should really" 0 1 (fontified t) 1 5 (fontified t) 5 8 (face font-lock-comment-delimiter-face fontified t) 8 80 (face font-lock-comment-face fontified t)) . 960) (undo-tree-id232 . 79)) nil (25143 28041 484340 469000) 0 nil])
([nil nil ((#("Vjx
    ;;        be considered upstream.
" 0 3 (fontified t) 3 4 (fontified t) 4 8 (fontified t) 8 18 (face font-lock-comment-delimiter-face fontified t) 18 42 (face font-lock-comment-face fontified t)) . 959) (undo-tree-id207 . -6) (undo-tree-id208 . -2) (undo-tree-id209 . -6) (undo-tree-id210 . 39) (undo-tree-id211 . -6) (undo-tree-id212 . -42) (undo-tree-id213 . -2) (undo-tree-id214 . -6) (undo-tree-id215 . -4) (undo-tree-id216 . -6) (undo-tree-id217 . -6) (undo-tree-id218 . -6) (undo-tree-id219 . -6) (undo-tree-id220 . -6) (undo-tree-id221 . -6) (undo-tree-id222 . -6) (undo-tree-id223 . -6) (undo-tree-id224 . -6) (undo-tree-id225 . -6) (undo-tree-id226 . -6) (undo-tree-id227 . -6) (undo-tree-id228 . -6) (undo-tree-id229 . -6) (undo-tree-id230 . -6) (undo-tree-id231 . -6) 965) nil (25143 28041 484331 186000) 0 nil])
([nil nil ((826 . 827) (#(" " 0 1 (fontified t)) . -826) (undo-tree-id510 . -1) (827 . 828) (#(" " 0 1 (fontified t)) . -827) (undo-tree-id511 . -1) 828 (#(" " 0 1 (fontified t)) . 817) (818 . 819) 817 (#(" " 0 1 (fontified t)) . 816) (817 . 818) 816 (#(" " 0 1 (fontified t)) . 815) (816 . 817) 815 (#(" " 0 1 (fontified t)) . 814) (815 . 816) 814 (#(" " 0 1 (fontified t)) . 813) (814 . 815) 813 (#(" " 0 1 (fontified t)) . 812) (813 . 814) 812 (#(" " 0 1 (fontified t)) . 811) (812 . 813) 811 (#(" " 0 1 (fontified t)) . 810) (811 . 812) 810 (#(" " 0 1 (fontified t)) . 809) (810 . 811) 809 (#(" " 0 1 (fontified t)) . 808) (809 . 810) 808 (808 . 809) (#("c" 0 1 (face font-lock-builtin-face fontified t)) . -808) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (809 . 810) (#("o" 0 1 (face font-lock-builtin-face fontified t)) . -809) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (810 . 811) (#("n" 0 1 (face font-lock-builtin-face fontified t)) . -810) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (811 . 812) (#("f" 0 1 (face font-lock-builtin-face fontified t)) . -811) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (812 . 813) (#("i" 0 1 (face font-lock-builtin-face fontified t)) . -812) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (813 . 814) (#("g" 0 1 (face font-lock-builtin-face fontified t)) . -813) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (#("
" 0 1 (fontified t)) . -814) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (815 . 816) (#(" " 0 1 (fontified t)) . -815) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (816 . 817) (#(" " 0 1 (fontified t)) . -816) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (817 . 818) (#("(" 0 1 (fontified t)) . -817) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (818 . 819) (#("d" 0 1 (fontified t)) . -818) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (819 . 820) (#("e" 0 1 (fontified t)) . -819) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (820 . 821) (#("f" 0 1 (fontified t)) . -820) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (821 . 822) (#("i" 0 1 (fontified t)) . -821) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (822 . 823) (#("n" 0 1 (fontified t)) . -822) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (823 . 824) (#("e" 0 1 (fontified t)) . -823) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (824 . 825) (#("-" 0 1 (fontified t)) . -824) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (825 . 826) (#("k" 0 1 (fontified t)) . -825) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (826 . 827) (#("e" 0 1 (fontified t)) . -826) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (827 . 828) (#("y" 0 1 (fontified t)) . -827) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) 828 (#("!" 0 1 (fontified t)) . 828) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (t 25143 28041 491257 291000)) nil (25143 28323 315235 44000) 0 nil])
([nil nil ((#("                       " 0 23 (fontified t)) . -852) (undo-tree-id509 . -23) 875 (851 . 875) 824) nil (25143 28323 315095 95000) 0 nil])
([nil nil ((nil rear-nonsticky nil 826 . 827) (nil fontified nil 746 . 827) (746 . 827)) nil (25143 28323 315091 902000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -926) (undo-tree-id498 . -1) 927 (926 . 927) (#("" 0 1 (fontified t)) . -926) (undo-tree-id499 . -1) 927 (926 . 927) (#("
" 0 1 (fontified t)) . -737) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (#(" " 0 1 (fontified t)) . -738) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) 739 (#(" :init" 0 1 (fontified t) 1 6 (face font-lock-builtin-face fontified t)) . 739) (undo-tree-id506 . -6) (undo-tree-id507 . -5) (undo-tree-id508 . -6) (746 . 748)) nil (25143 28323 315088 181000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -1141) (undo-tree-id463 . -1) (undo-tree-id464 . 1) (undo-tree-id465 . -1) 1142 (827 . 841) (#("              " 0 14 (fontified nil)) . 826) (undo-tree-id466 . -14) (826 . 841) (778 . 783) (820 . 821) (#(":" 0 1 (fontified t)) . -882) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (#("b" 0 1 (face font-lock-builtin-face fontified t)) . -883) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (#("i" 0 1 (face font-lock-builtin-face fontified t)) . -884) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (#("n" 0 1 (face font-lock-builtin-face fontified t)) . -885) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (#("d" 0 1 (face font-lock-builtin-face fontified t)) . -886) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (#("-" 0 1 (face font-lock-builtin-face fontified t)) . -887) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (#("m" 0 1 (face font-lock-builtin-face fontified t)) . -888) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (#("a" 0 1 (face font-lock-builtin-face fontified t)) . -889) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (#("p" 0 1 (face font-lock-builtin-face fontified t)) . -890) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (#(" " 0 1 (fontified t)) . -891) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (#("(" 0 1 (fontified t)) . -892) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (#(" " 0 1 (fontified t)) . -893) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (#(" " 0 1 (fontified t)) . -894) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (#(" " 0 1 (fontified t)) . -895) (undo-tree-id496 . -1) (undo-tree-id497 . -1) 896) nil (25143 28323 315065 991000) 0 nil])
([nil nil ((#("         evil-treemacs-state-map
" 0 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 32 (fontified t) 32 33 (fontified t)) . 901) (undo-tree-id455 . -2) (undo-tree-id456 . -2) (undo-tree-id457 . 24) (undo-tree-id458 . -2) (undo-tree-id459 . -2) (undo-tree-id460 . 3) (undo-tree-id461 . -29) (undo-tree-id462 . -8) 930) nil (25143 28323 315006 430000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -752) (undo-tree-id414 . -1) (#(" " 0 1 (fontified t)) . -753) (undo-tree-id415 . -1) (#(" " 0 1 (fontified t)) . -754) (undo-tree-id416 . -1) (#(" " 0 1 (fontified t)) . -755) (undo-tree-id417 . -1) (#(" " 0 1 (fontified t)) . -756) (undo-tree-id418 . -1) (#(" " 0 1 (fontified t)) . -757) (undo-tree-id419 . -1) (#(" " 0 1 (fontified t)) . -758) (undo-tree-id420 . -1) (#(" " 0 1 (fontified t)) . -759) (undo-tree-id421 . -1) (#(" " 0 1 (fontified t)) . -760) (undo-tree-id422 . -1) 761 (#("
" 0 1 (rear-nonsticky t fontified t)) . -784) (undo-tree-id423 . -1) 785 (nil rear-nonsticky nil 784 . 785) (752 . 785) (#("h" 0 1 (fontified t)) . -752) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (#("e" 0 1 (fontified t)) . -753) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (#("l" 0 1 (fontified t)) . -754) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (#("m" 0 1 (fontified t)) . -755) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (#("-" 0 1 (fontified t)) . -756) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (#("c" 0 1 (fontified t)) . -757) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (#("o" 0 1 (fontified t)) . -758) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (#("m" 0 1 (fontified t)) . -759) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (#("m" 0 1 (fontified t)) . -760) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (#("a" 0 1 (fontified t)) . -761) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (#("n" 0 1 (fontified t)) . -762) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (#("d" 0 1 (fontified t)) . -763) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (#("-" 0 1 (fontified t)) . -764) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (#("m" 0 1 (fontified t)) . -765) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (#("a" 0 1 (fontified t)) . -766) (undo-tree-id452 . -1) (undo-tree-id453 . -1) 767 (#("p" 0 1 (fontified t)) . 767) (undo-tree-id454 . -1)) nil (25143 28323 314987 726000) 0 nil])
([nil nil ((#("              (\"C-c h\" . helm-execute-persistent-action)
" 0 15 (fontified t) 15 22 (face font-lock-string-face fontified t) 22 57 (fontified t)) . 776) (undo-tree-id407 . 1) (undo-tree-id408 . -55) (undo-tree-id409 . -56) (undo-tree-id410 . 2) (undo-tree-id411 . -56) (undo-tree-id412 . 43) (undo-tree-id413 . -15) 831) nil (25143 28323 314930 253000) 0 nil])
([nil nil ((1014 . 1015) (960 . 961) (923 . 924) (887 . 888) (856 . 857) (#(" " 0 1 (fontified t)) . 891) (890 . 891) (926 . 927) (#("k" 0 1 (fontified t)) . -962) (undo-tree-id394 . -1) 963 (961 . 963) (1013 . 1014) (1059 . 1060) (1022 . 1025) (#("#" 0 1 (fontified t)) . -1022) (undo-tree-id395 . -1) (#("'" 0 1 (fontified t)) . -1023) (undo-tree-id396 . -1) 1024 (971 . 972) (970 . 971) (#("#" 0 1 (fontified t)) . -970) (undo-tree-id397 . -1) (#("'" 0 1 (fontified t)) . -971) (undo-tree-id398 . -1) 972 (935 . 937) (#("#" 0 1 (fontified t)) . -935) (undo-tree-id399 . -1) (#("'" 0 1 (fontified t)) . -936) (undo-tree-id400 . -1) 937 (900 . 902) (#("#" 0 1 (fontified t)) . -900) (undo-tree-id401 . -1) (#("'" 0 1 (fontified t)) . -901) (undo-tree-id402 . -1) 902 (865 . 867) (#("#" 0 1 (fontified t)) . -865) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (#("'" 0 1 (fontified t)) . -866) (undo-tree-id405 . -1) (undo-tree-id406 . -1) 867) nil (25143 28323 314915 866000) 0 nil])
([nil nil ((1068 . 1073)) nil (25143 28323 314889 873000) 0 nil])
([nil nil ((#("    ([return] . treemacs-RET-action)
   ([tab]    . treemacs-TAB-action)
    (\"TAB\"    . treemacs-TAB-action)
    (\"o v\"    . treemacs-visit-node-horizontal-split)
    (\"o s\"     . treemacs-visit-node-vertical-split)
" 0 37 (fontified t) 37 73 (fontified t) 73 78 (fontified t) 78 83 (face font-lock-string-face fontified t) 83 110 (fontified t) 110 115 (fontified t) 115 120 (face font-lock-string-face fontified t) 120 164 (fontified t) 164 169 (fontified t) 169 174 (face font-lock-string-face fontified t) 174 217 (fontified t)) . 852) (undo-tree-id388 . -215) (undo-tree-id389 . -215) (undo-tree-id390 . -36) (undo-tree-id391 . -36) (undo-tree-id392 . -36) (undo-tree-id393 . -215) 888) nil (25143 28323 314888 111000) 0 nil])
([nil nil ((nil rear-nonsticky nil 780 . 781) (777 . 994) (776 . 777) (#("
" 0 1 (fontified t)) . 776) (undo-tree-id387 . -1) 777) nil (25143 28323 314879 841000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 776) (undo-tree-id386 . -1)) nil (25143 28323 314876 90000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -992) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (#(" " 0 1 (fontified t)) . -993) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (#(" " 0 1 (fontified t)) . -994) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (#(" " 0 1 (fontified t)) . -995) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (#(" " 0 1 (fontified t)) . -996) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (#(" " 0 1 (fontified t)) . -997) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (#(" " 0 1 (fontified t)) . -998) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (#(" " 0 1 (fontified t)) . -999) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (#(" " 0 1 (fontified t)) . -1000) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (#(" " 0 1 (fontified t)) . -1001) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (#(" " 0 1 (fontified t)) . -1002) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (#(" " 0 1 (fontified t)) . -1003) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (#(" " 0 1 (fontified t)) . -1004) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (#(" " 0 1 (fontified t)) . -1005) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (#(" " 0 1 (fontified t)) . -1006) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) 1007) nil (25143 28323 314865 505000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -951) (undo-tree-id308 . -1) (#(" " 0 1 (fontified t)) . -952) (undo-tree-id309 . -1) (#(" " 0 1 (fontified t)) . -953) (undo-tree-id310 . -1) 954) nil (25143 28323 314763 253000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 951)) nil (25143 28323 314757 449000) 0 nil])
([nil nil ((#("   " 0 3 (fontified t)) . 896) (undo-tree-id306 . -3) (undo-tree-id307 . -3)) nil (25143 28323 314755 416000) 0 nil])
([nil nil ((#("   " 0 3 (fontified t)) . 859) (undo-tree-id303 . -3) (undo-tree-id304 . -3) (undo-tree-id305 . -3)) nil (25143 28323 314750 443000) 0 nil])
([nil nil ((#("   " 0 3 (fontified t)) . 823) (undo-tree-id268 . -3) (undo-tree-id269 . -3) (undo-tree-id270 . -3) (undo-tree-id271 . -3) (undo-tree-id272 . -3) (undo-tree-id273 . -3) (undo-tree-id274 . -3) (undo-tree-id275 . -3) (undo-tree-id276 . -3) (undo-tree-id277 . -3) (undo-tree-id278 . -3) (undo-tree-id279 . -3) (undo-tree-id280 . -3) (undo-tree-id281 . -3) (undo-tree-id282 . -3) (undo-tree-id283 . -3) (undo-tree-id284 . -3) (undo-tree-id285 . -3) (undo-tree-id286 . -3) (undo-tree-id287 . -3) (undo-tree-id288 . -3) (undo-tree-id289 . -3) (undo-tree-id290 . -3) (undo-tree-id291 . -2) (undo-tree-id292 . -2) (undo-tree-id293 . -2) (undo-tree-id294 . -2) (undo-tree-id295 . -2) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -3) (undo-tree-id302 . -3)) nil (25143 28323 314738 693000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -980) (undo-tree-id614 . -1) (undo-tree-id615 . 1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) 981 (#(" " 0 1 (fontified t)) . 981) (#(" " 0 1 (fontified t)) . 981) (#(" " 0 1 (fontified t)) . 981) (#(" " 0 1 (fontified t)) . 981) (#("
" 0 1 (fontified t)) . 981) (#("
" 0 1 (fontified t)) . 981) (undo-tree-id660 . -1) (#("  ;;(add-to-list 'doom-evil-state-alist '(?T . treemacs))" 0 2 (fontified t) 2 4 (face font-lock-comment-delimiter-face fontified t) 4 57 (face font-lock-comment-face fontified t)) . 981) (undo-tree-id661 . -57) (undo-tree-id662 . -2) (undo-tree-id663 . -57) (t 25143 28323 322238 945000)) nil (25143 28331 541675 161000) 0 nil])
([nil nil ((#("
(use-package treemacs
  :config
  (require 'treemacs-evil))
" 0 1 (fontified t) 1 2 (fontified t) 2 13 (face font-lock-keyword-face fontified t) 13 14 (fontified t) 14 22 (face font-lock-constant-face fontified t) 22 23 (fontified t) 23 25 (fontified t) 25 32 (face font-lock-builtin-face fontified t) 32 33 (fontified t) 33 36 (fontified t) 36 43 (face font-lock-keyword-face fontified t) 43 45 (fontified t) 45 58 (face font-lock-constant-face fontified t) 58 60 (fontified t) 60 61 (fontified t)) . 200) (undo-tree-id664 . -60) (undo-tree-id665 . -60) (undo-tree-id666 . -60) (undo-tree-id667 . -61) (undo-tree-id668 . -27) (undo-tree-id669 . -27) (undo-tree-id670 . -27) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (t 25143 28331 545859 298000)) nil (25143 28347 654051 19000) 0 nil])
([nil nil ((460 . 462) (t 25143 28347 657115 551000)) nil (25143 28361 636140 241000) 0 nil])
([nil nil ((377 . 378) (t 25143 28361 640470 73000)) nil (25143 28391 315442 243000) 0 nil])
([nil nil ((584 . 588) (nil rear-nonsticky nil 583 . 584) (nil fontified nil 570 . 584) (570 . 584) (564 . 570) (561 . 564) (t 25143 28391 319100 203000) 560) nil (25143 28901 751449 8000) 0 nil])
([nil current ((585 . 586) (#("3" 0 1 (fontified t)) . 585)) nil (25143 28901 751441 589000) 0 nil])
nil
